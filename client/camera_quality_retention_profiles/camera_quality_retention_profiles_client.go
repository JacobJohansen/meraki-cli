// Code generated by go-swagger; DO NOT EDIT.

package camera_quality_retention_profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new camera quality retention profiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for camera quality retention profiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkCameraQualityRetentionProfile(params *CreateNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkCameraQualityRetentionProfileOK, error)

	DeleteNetworkCameraQualityRetentionProfile(params *DeleteNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkCameraQualityRetentionProfileNoContent, error)

	GetNetworkCameraQualityRetentionProfile(params *GetNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkCameraQualityRetentionProfileOK, error)

	GetNetworkCameraQualityRetentionProfiles(params *GetNetworkCameraQualityRetentionProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkCameraQualityRetentionProfilesOK, error)

	UpdateNetworkCameraQualityRetentionProfile(params *UpdateNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkCameraQualityRetentionProfileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkCameraQualityRetentionProfile creates network camera quality retention profile

  Creates new quality retention profile for this network.
*/
func (a *Client) CreateNetworkCameraQualityRetentionProfile(params *CreateNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkCameraQualityRetentionProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkCameraQualityRetentionProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkCameraQualityRetentionProfile",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkCameraQualityRetentionProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkCameraQualityRetentionProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkCameraQualityRetentionProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkCameraQualityRetentionProfile deletes network camera quality retention profile

  Delete an existing quality retention profile for this network.
*/
func (a *Client) DeleteNetworkCameraQualityRetentionProfile(params *DeleteNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkCameraQualityRetentionProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkCameraQualityRetentionProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkCameraQualityRetentionProfile",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkCameraQualityRetentionProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkCameraQualityRetentionProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkCameraQualityRetentionProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCameraQualityRetentionProfile gets network camera quality retention profile

  Retrieve a single quality retention profile
*/
func (a *Client) GetNetworkCameraQualityRetentionProfile(params *GetNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkCameraQualityRetentionProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCameraQualityRetentionProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkCameraQualityRetentionProfile",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCameraQualityRetentionProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCameraQualityRetentionProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCameraQualityRetentionProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCameraQualityRetentionProfiles gets network camera quality retention profiles

  List the quality retention profiles for this network
*/
func (a *Client) GetNetworkCameraQualityRetentionProfiles(params *GetNetworkCameraQualityRetentionProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkCameraQualityRetentionProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCameraQualityRetentionProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkCameraQualityRetentionProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCameraQualityRetentionProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCameraQualityRetentionProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCameraQualityRetentionProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkCameraQualityRetentionProfile updates network camera quality retention profile

  Update an existing quality retention profile for this network.
*/
func (a *Client) UpdateNetworkCameraQualityRetentionProfile(params *UpdateNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkCameraQualityRetentionProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkCameraQualityRetentionProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkCameraQualityRetentionProfile",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkCameraQualityRetentionProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkCameraQualityRetentionProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkCameraQualityRetentionProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
