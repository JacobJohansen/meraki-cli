// Code generated by go-swagger; DO NOT EDIT.

package switch_port_schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new switch port schedules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for switch port schedules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkSwitchPortSchedule(params *CreateNetworkSwitchPortScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSwitchPortScheduleCreated, error)

	DeleteNetworkSwitchPortSchedule(params *DeleteNetworkSwitchPortScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSwitchPortScheduleNoContent, error)

	GetNetworkSwitchPortSchedules(params *GetNetworkSwitchPortSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchPortSchedulesOK, error)

	UpdateNetworkSwitchPortSchedule(params *UpdateNetworkSwitchPortScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchPortScheduleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkSwitchPortSchedule creates network switch port schedule

  Add a switch port schedule
*/
func (a *Client) CreateNetworkSwitchPortSchedule(params *CreateNetworkSwitchPortScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSwitchPortScheduleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSwitchPortScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkSwitchPortSchedule",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/switch/portSchedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSwitchPortScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSwitchPortScheduleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkSwitchPortSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkSwitchPortSchedule deletes network switch port schedule

  Delete a switch port schedule
*/
func (a *Client) DeleteNetworkSwitchPortSchedule(params *DeleteNetworkSwitchPortScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSwitchPortScheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSwitchPortScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkSwitchPortSchedule",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/switch/portSchedules/{portScheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSwitchPortScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSwitchPortScheduleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkSwitchPortSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchPortSchedules gets network switch port schedules

  List switch port schedules
*/
func (a *Client) GetNetworkSwitchPortSchedules(params *GetNetworkSwitchPortSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchPortSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchPortSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchPortSchedules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/portSchedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchPortSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchPortSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchPortSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchPortSchedule updates network switch port schedule

  Update a switch port schedule
*/
func (a *Client) UpdateNetworkSwitchPortSchedule(params *UpdateNetworkSwitchPortScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchPortScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchPortScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchPortSchedule",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/portSchedules/{portScheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchPortScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchPortScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchPortSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
