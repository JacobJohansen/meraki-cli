// Code generated by go-swagger; DO NOT EDIT.

package p_i_i

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new p i i API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p i i API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkPiiRequest(params *CreateNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkPiiRequestCreated, error)

	DeleteNetworkPiiRequest(params *DeleteNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkPiiRequestNoContent, error)

	GetNetworkPiiPiiKeys(params *GetNetworkPiiPiiKeysParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiPiiKeysOK, error)

	GetNetworkPiiRequest(params *GetNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiRequestOK, error)

	GetNetworkPiiRequests(params *GetNetworkPiiRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiRequestsOK, error)

	GetNetworkPiiSmDevicesForKey(params *GetNetworkPiiSmDevicesForKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiSmDevicesForKeyOK, error)

	GetNetworkPiiSmOwnersForKey(params *GetNetworkPiiSmOwnersForKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiSmOwnersForKeyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkPiiRequest creates network pii request

  Submit a new delete or restrict processing PII request

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests
```
*/
func (a *Client) CreateNetworkPiiRequest(params *CreateNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkPiiRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkPiiRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkPiiRequest",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/pii/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkPiiRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkPiiRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkPiiRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkPiiRequest deletes network pii request

  Delete a restrict processing PII request

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests/{requestId}
```
*/
func (a *Client) DeleteNetworkPiiRequest(params *DeleteNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkPiiRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkPiiRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkPiiRequest",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/pii/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkPiiRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkPiiRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkPiiRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiPiiKeys gets network pii pii keys

  List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key "0" containing the applicable keys.

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/piiKeys
```
*/
func (a *Client) GetNetworkPiiPiiKeys(params *GetNetworkPiiPiiKeysParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiPiiKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiPiiKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkPiiPiiKeys",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/piiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiPiiKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiPiiKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiPiiKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiRequest gets network pii request

  Return a PII request

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests/{requestId}
```
*/
func (a *Client) GetNetworkPiiRequest(params *GetNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkPiiRequest",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiRequests gets network pii requests

  List the PII requests for this network or organization

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests
```
*/
func (a *Client) GetNetworkPiiRequests(params *GetNetworkPiiRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkPiiRequests",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiSmDevicesForKey gets network pii sm devices for key

  Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/smDevicesForKey
```
*/
func (a *Client) GetNetworkPiiSmDevicesForKey(params *GetNetworkPiiSmDevicesForKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiSmDevicesForKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiSmDevicesForKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkPiiSmDevicesForKey",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/smDevicesForKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiSmDevicesForKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiSmDevicesForKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiSmDevicesForKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiSmOwnersForKey gets network pii sm owners for key

  Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/smOwnersForKey
```
*/
func (a *Client) GetNetworkPiiSmOwnersForKey(params *GetNetworkPiiSmOwnersForKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPiiSmOwnersForKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiSmOwnersForKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkPiiSmOwnersForKey",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/smOwnersForKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiSmOwnersForKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiSmOwnersForKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiSmOwnersForKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
