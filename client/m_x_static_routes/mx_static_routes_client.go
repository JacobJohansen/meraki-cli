// Code generated by go-swagger; DO NOT EDIT.

package m_x_static_routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new m x static routes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for m x static routes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkStaticRoute(params *CreateNetworkStaticRouteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkStaticRouteCreated, error)

	DeleteNetworkStaticRoute(params *DeleteNetworkStaticRouteParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkStaticRouteNoContent, error)

	GetNetworkStaticRoute(params *GetNetworkStaticRouteParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkStaticRouteOK, error)

	GetNetworkStaticRoutes(params *GetNetworkStaticRoutesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkStaticRoutesOK, error)

	UpdateNetworkStaticRoute(params *UpdateNetworkStaticRouteParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkStaticRouteOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkStaticRoute creates network static route

  Add a static route for an MX or teleworker network
*/
func (a *Client) CreateNetworkStaticRoute(params *CreateNetworkStaticRouteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkStaticRouteCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkStaticRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkStaticRoute",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/staticRoutes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkStaticRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkStaticRouteCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkStaticRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkStaticRoute deletes network static route

  Delete a static route from an MX or teleworker network
*/
func (a *Client) DeleteNetworkStaticRoute(params *DeleteNetworkStaticRouteParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkStaticRouteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkStaticRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkStaticRoute",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/staticRoutes/{staticRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkStaticRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkStaticRouteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkStaticRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkStaticRoute gets network static route

  Return a static route for an MX or teleworker network
*/
func (a *Client) GetNetworkStaticRoute(params *GetNetworkStaticRouteParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkStaticRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkStaticRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkStaticRoute",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/staticRoutes/{staticRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkStaticRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkStaticRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkStaticRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkStaticRoutes gets network static routes

  List the static routes for an MX or teleworker network
*/
func (a *Client) GetNetworkStaticRoutes(params *GetNetworkStaticRoutesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkStaticRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkStaticRoutesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkStaticRoutes",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/staticRoutes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkStaticRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkStaticRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkStaticRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkStaticRoute updates network static route

  Update a static route for an MX or teleworker network
*/
func (a *Client) UpdateNetworkStaticRoute(params *UpdateNetworkStaticRouteParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkStaticRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkStaticRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkStaticRoute",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/staticRoutes/{staticRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkStaticRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkStaticRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkStaticRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
