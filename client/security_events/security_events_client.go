// Code generated by go-swagger; DO NOT EDIT.

package security_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetNetworkClientSecurityEvents(params *GetNetworkClientSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientSecurityEventsOK, error)

	GetNetworkSecurityEvents(params *GetNetworkSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSecurityEventsOK, error)

	GetOrganizationSecurityEvents(params *GetOrganizationSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationSecurityEventsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetNetworkClientSecurityEvents gets network client security events

  List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientSecurityEvents(params *GetNetworkClientSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientSecurityEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientSecurityEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientSecurityEvents",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/securityEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientSecurityEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientSecurityEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientSecurityEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSecurityEvents gets network security events

  List the security events for a network
*/
func (a *Client) GetNetworkSecurityEvents(params *GetNetworkSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSecurityEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSecurityEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSecurityEvents",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/securityEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSecurityEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSecurityEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSecurityEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSecurityEvents gets organization security events

  List the security events for an organization
*/
func (a *Client) GetOrganizationSecurityEvents(params *GetOrganizationSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationSecurityEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSecurityEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationSecurityEvents",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/securityEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSecurityEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSecurityEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSecurityEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
