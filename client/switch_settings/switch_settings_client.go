// Code generated by go-swagger; DO NOT EDIT.

package switch_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new switch settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for switch settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkSwitchSettingsQosRule(params *CreateNetworkSwitchSettingsQosRuleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSwitchSettingsQosRuleCreated, error)

	DeleteNetworkSwitchSettingsQosRule(params *DeleteNetworkSwitchSettingsQosRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSwitchSettingsQosRuleNoContent, error)

	GetNetworkSwitchSettings(params *GetNetworkSwitchSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsOK, error)

	GetNetworkSwitchSettingsDhcpServerPolicy(params *GetNetworkSwitchSettingsDhcpServerPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsDhcpServerPolicyOK, error)

	GetNetworkSwitchSettingsDscpToCosMappings(params *GetNetworkSwitchSettingsDscpToCosMappingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsDscpToCosMappingsOK, error)

	GetNetworkSwitchSettingsMtu(params *GetNetworkSwitchSettingsMtuParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsMtuOK, error)

	GetNetworkSwitchSettingsMulticast(params *GetNetworkSwitchSettingsMulticastParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsMulticastOK, error)

	GetNetworkSwitchSettingsQosRule(params *GetNetworkSwitchSettingsQosRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsQosRuleOK, error)

	GetNetworkSwitchSettingsQosRules(params *GetNetworkSwitchSettingsQosRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsQosRulesOK, error)

	GetNetworkSwitchSettingsQosRulesOrder(params *GetNetworkSwitchSettingsQosRulesOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsQosRulesOrderOK, error)

	GetNetworkSwitchSettingsStormControl(params *GetNetworkSwitchSettingsStormControlParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsStormControlOK, error)

	GetNetworkSwitchSettingsStp(params *GetNetworkSwitchSettingsStpParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsStpOK, error)

	UpdateNetworkSwitchSettings(params *UpdateNetworkSwitchSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsOK, error)

	UpdateNetworkSwitchSettingsDhcpServerPolicy(params *UpdateNetworkSwitchSettingsDhcpServerPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsDhcpServerPolicyOK, error)

	UpdateNetworkSwitchSettingsDscpToCosMappings(params *UpdateNetworkSwitchSettingsDscpToCosMappingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsDscpToCosMappingsOK, error)

	UpdateNetworkSwitchSettingsMtu(params *UpdateNetworkSwitchSettingsMtuParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsMtuOK, error)

	UpdateNetworkSwitchSettingsMulticast(params *UpdateNetworkSwitchSettingsMulticastParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsMulticastOK, error)

	UpdateNetworkSwitchSettingsQosRule(params *UpdateNetworkSwitchSettingsQosRuleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsQosRuleOK, error)

	UpdateNetworkSwitchSettingsQosRulesOrder(params *UpdateNetworkSwitchSettingsQosRulesOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsQosRulesOrderOK, error)

	UpdateNetworkSwitchSettingsStormControl(params *UpdateNetworkSwitchSettingsStormControlParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsStormControlOK, error)

	UpdateNetworkSwitchSettingsStp(params *UpdateNetworkSwitchSettingsStpParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsStpOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkSwitchSettingsQosRule creates network switch settings qos rule

  Add a quality of service rule
*/
func (a *Client) CreateNetworkSwitchSettingsQosRule(params *CreateNetworkSwitchSettingsQosRuleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSwitchSettingsQosRuleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSwitchSettingsQosRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkSwitchSettingsQosRule",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/switch/settings/qosRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSwitchSettingsQosRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSwitchSettingsQosRuleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkSwitchSettingsQosRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkSwitchSettingsQosRule deletes network switch settings qos rule

  Delete a quality of service rule
*/
func (a *Client) DeleteNetworkSwitchSettingsQosRule(params *DeleteNetworkSwitchSettingsQosRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSwitchSettingsQosRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSwitchSettingsQosRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkSwitchSettingsQosRule",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/switch/settings/qosRules/{qosRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSwitchSettingsQosRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSwitchSettingsQosRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkSwitchSettingsQosRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettings gets network switch settings

  Returns the switch network settings
*/
func (a *Client) GetNetworkSwitchSettings(params *GetNetworkSwitchSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettingsDhcpServerPolicy gets network switch settings dhcp server policy

  Return the DHCP server policy
*/
func (a *Client) GetNetworkSwitchSettingsDhcpServerPolicy(params *GetNetworkSwitchSettingsDhcpServerPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsDhcpServerPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsDhcpServerPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettingsDhcpServerPolicy",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings/dhcpServerPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsDhcpServerPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsDhcpServerPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettingsDhcpServerPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettingsDscpToCosMappings gets network switch settings dscp to cos mappings

  Return the DSCP to CoS mappings
*/
func (a *Client) GetNetworkSwitchSettingsDscpToCosMappings(params *GetNetworkSwitchSettingsDscpToCosMappingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsDscpToCosMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsDscpToCosMappingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettingsDscpToCosMappings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings/dscpToCosMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsDscpToCosMappingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsDscpToCosMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettingsDscpToCosMappings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettingsMtu gets network switch settings mtu

  Return the MTU configuration
*/
func (a *Client) GetNetworkSwitchSettingsMtu(params *GetNetworkSwitchSettingsMtuParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsMtuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsMtuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettingsMtu",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings/mtu",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsMtuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsMtuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettingsMtu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettingsMulticast gets network switch settings multicast

  Return multicast settings for a network
*/
func (a *Client) GetNetworkSwitchSettingsMulticast(params *GetNetworkSwitchSettingsMulticastParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsMulticastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsMulticastParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettingsMulticast",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings/multicast",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsMulticastReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsMulticastOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettingsMulticast: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettingsQosRule gets network switch settings qos rule

  Return a quality of service rule
*/
func (a *Client) GetNetworkSwitchSettingsQosRule(params *GetNetworkSwitchSettingsQosRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsQosRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsQosRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettingsQosRule",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings/qosRules/{qosRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsQosRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsQosRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettingsQosRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettingsQosRules gets network switch settings qos rules

  List quality of service rules
*/
func (a *Client) GetNetworkSwitchSettingsQosRules(params *GetNetworkSwitchSettingsQosRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsQosRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsQosRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettingsQosRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings/qosRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsQosRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsQosRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettingsQosRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettingsQosRulesOrder gets network switch settings qos rules order

  Return the quality of service rule IDs by order in which they will be processed by the switch
*/
func (a *Client) GetNetworkSwitchSettingsQosRulesOrder(params *GetNetworkSwitchSettingsQosRulesOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsQosRulesOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsQosRulesOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettingsQosRulesOrder",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings/qosRules/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsQosRulesOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsQosRulesOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettingsQosRulesOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettingsStormControl gets network switch settings storm control

  Return the storm control configuration for a switch network
*/
func (a *Client) GetNetworkSwitchSettingsStormControl(params *GetNetworkSwitchSettingsStormControlParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsStormControlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsStormControlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettingsStormControl",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings/stormControl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsStormControlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsStormControlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettingsStormControl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchSettingsStp gets network switch settings stp

  Returns STP settings
*/
func (a *Client) GetNetworkSwitchSettingsStp(params *GetNetworkSwitchSettingsStpParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchSettingsStpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchSettingsStpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchSettingsStp",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/settings/stp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchSettingsStpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchSettingsStpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchSettingsStp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchSettings updates network switch settings

  Update switch network settings
*/
func (a *Client) UpdateNetworkSwitchSettings(params *UpdateNetworkSwitchSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchSettingsDhcpServerPolicy updates network switch settings dhcp server policy

  Update the DHCP server policy
*/
func (a *Client) UpdateNetworkSwitchSettingsDhcpServerPolicy(params *UpdateNetworkSwitchSettingsDhcpServerPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsDhcpServerPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchSettingsDhcpServerPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchSettingsDhcpServerPolicy",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/settings/dhcpServerPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchSettingsDhcpServerPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchSettingsDhcpServerPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchSettingsDhcpServerPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchSettingsDscpToCosMappings updates network switch settings dscp to cos mappings

  Update the DSCP to CoS mappings
*/
func (a *Client) UpdateNetworkSwitchSettingsDscpToCosMappings(params *UpdateNetworkSwitchSettingsDscpToCosMappingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsDscpToCosMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchSettingsDscpToCosMappingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchSettingsDscpToCosMappings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/settings/dscpToCosMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchSettingsDscpToCosMappingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchSettingsDscpToCosMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchSettingsDscpToCosMappings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchSettingsMtu updates network switch settings mtu

  Update the MTU configuration
*/
func (a *Client) UpdateNetworkSwitchSettingsMtu(params *UpdateNetworkSwitchSettingsMtuParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsMtuOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchSettingsMtuParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchSettingsMtu",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/settings/mtu",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchSettingsMtuReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchSettingsMtuOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchSettingsMtu: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchSettingsMulticast updates network switch settings multicast

  Update multicast settings for a network
*/
func (a *Client) UpdateNetworkSwitchSettingsMulticast(params *UpdateNetworkSwitchSettingsMulticastParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsMulticastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchSettingsMulticastParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchSettingsMulticast",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/settings/multicast",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchSettingsMulticastReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchSettingsMulticastOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchSettingsMulticast: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchSettingsQosRule updates network switch settings qos rule

  Update a quality of service rule
*/
func (a *Client) UpdateNetworkSwitchSettingsQosRule(params *UpdateNetworkSwitchSettingsQosRuleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsQosRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchSettingsQosRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchSettingsQosRule",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/settings/qosRules/{qosRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchSettingsQosRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchSettingsQosRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchSettingsQosRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchSettingsQosRulesOrder updates network switch settings qos rules order

  Update the order in which the rules should be processed by the switch
*/
func (a *Client) UpdateNetworkSwitchSettingsQosRulesOrder(params *UpdateNetworkSwitchSettingsQosRulesOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsQosRulesOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchSettingsQosRulesOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchSettingsQosRulesOrder",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/settings/qosRules/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchSettingsQosRulesOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchSettingsQosRulesOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchSettingsQosRulesOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchSettingsStormControl updates network switch settings storm control

  Update the storm control configuration for a switch network
*/
func (a *Client) UpdateNetworkSwitchSettingsStormControl(params *UpdateNetworkSwitchSettingsStormControlParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsStormControlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchSettingsStormControlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchSettingsStormControl",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/settings/stormControl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchSettingsStormControlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchSettingsStormControlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchSettingsStormControl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchSettingsStp updates network switch settings stp

  Updates STP settings
*/
func (a *Client) UpdateNetworkSwitchSettingsStp(params *UpdateNetworkSwitchSettingsStpParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchSettingsStpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchSettingsStpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchSettingsStp",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/settings/stp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchSettingsStpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchSettingsStpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchSettingsStp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
