// Code generated by go-swagger; DO NOT EDIT.

package s_n_m_p_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s n m p settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s n m p settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetNetworkSnmpSettings(params *GetNetworkSnmpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSnmpSettingsOK, error)

	GetOrganizationSnmp(params *GetOrganizationSnmpParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationSnmpOK, error)

	UpdateNetworkSnmpSettings(params *UpdateNetworkSnmpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSnmpSettingsOK, error)

	UpdateOrganizationSnmp(params *UpdateOrganizationSnmpParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationSnmpOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetNetworkSnmpSettings gets network snmp settings

  Return the SNMP settings for a network
*/
func (a *Client) GetNetworkSnmpSettings(params *GetNetworkSnmpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSnmpSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSnmpSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSnmpSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/snmpSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSnmpSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSnmpSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSnmpSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSnmp gets organization snmp

  Return the SNMP settings for an organization
*/
func (a *Client) GetOrganizationSnmp(params *GetOrganizationSnmpParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationSnmpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSnmpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationSnmp",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/snmp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSnmpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSnmpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSnmp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSnmpSettings updates network snmp settings

  Update the SNMP settings for a network
*/
func (a *Client) UpdateNetworkSnmpSettings(params *UpdateNetworkSnmpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSnmpSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSnmpSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSnmpSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/snmpSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSnmpSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSnmpSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSnmpSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationSnmp updates organization snmp

  Update the SNMP settings for an organization
*/
func (a *Client) UpdateOrganizationSnmp(params *UpdateOrganizationSnmpParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationSnmpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationSnmpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganizationSnmp",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/snmp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationSnmpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationSnmpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationSnmp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
