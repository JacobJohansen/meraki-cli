// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new admins API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for admins API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOrganizationAdmin(params *CreateOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationAdminCreated, error)

	DeleteOrganizationAdmin(params *DeleteOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationAdminNoContent, error)

	GetOrganizationAdmins(params *GetOrganizationAdminsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationAdminsOK, error)

	UpdateOrganizationAdmin(params *UpdateOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationAdminOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateOrganizationAdmin creates organization admin

  Create a new dashboard administrator
*/
func (a *Client) CreateOrganizationAdmin(params *CreateOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationAdminCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganizationAdmin",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/admins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationAdminCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationAdmin deletes organization admin

  Revoke all access for a dashboard administrator within this organization
*/
func (a *Client) DeleteOrganizationAdmin(params *DeleteOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationAdminNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganizationAdmin",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/admins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationAdminNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdmins gets organization admins

  List the dashboard administrators in this organization
*/
func (a *Client) GetOrganizationAdmins(params *GetOrganizationAdminsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationAdminsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdminsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationAdmins",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/admins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdminsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdminsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdmins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationAdmin updates organization admin

  Update an administrator
*/
func (a *Client) UpdateOrganizationAdmin(params *UpdateOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganizationAdmin",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/admins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationAdminOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
