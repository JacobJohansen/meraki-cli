// Code generated by go-swagger; DO NOT EDIT.

package link_aggregations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new link aggregations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for link aggregations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkSwitchLinkAggregation(params *CreateNetworkSwitchLinkAggregationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSwitchLinkAggregationCreated, error)

	DeleteNetworkSwitchLinkAggregation(params *DeleteNetworkSwitchLinkAggregationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSwitchLinkAggregationNoContent, error)

	GetNetworkSwitchLinkAggregations(params *GetNetworkSwitchLinkAggregationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchLinkAggregationsOK, error)

	UpdateNetworkSwitchLinkAggregation(params *UpdateNetworkSwitchLinkAggregationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchLinkAggregationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkSwitchLinkAggregation creates network switch link aggregation

  Create a link aggregation group
*/
func (a *Client) CreateNetworkSwitchLinkAggregation(params *CreateNetworkSwitchLinkAggregationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSwitchLinkAggregationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSwitchLinkAggregationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkSwitchLinkAggregation",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/switch/linkAggregations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSwitchLinkAggregationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSwitchLinkAggregationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkSwitchLinkAggregation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkSwitchLinkAggregation deletes network switch link aggregation

  Split a link aggregation group into separate ports
*/
func (a *Client) DeleteNetworkSwitchLinkAggregation(params *DeleteNetworkSwitchLinkAggregationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSwitchLinkAggregationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSwitchLinkAggregationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkSwitchLinkAggregation",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/switch/linkAggregations/{linkAggregationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSwitchLinkAggregationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSwitchLinkAggregationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkSwitchLinkAggregation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchLinkAggregations gets network switch link aggregations

  List link aggregation groups
*/
func (a *Client) GetNetworkSwitchLinkAggregations(params *GetNetworkSwitchLinkAggregationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchLinkAggregationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchLinkAggregationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchLinkAggregations",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switch/linkAggregations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchLinkAggregationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchLinkAggregationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchLinkAggregations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSwitchLinkAggregation updates network switch link aggregation

  Update a link aggregation group
*/
func (a *Client) UpdateNetworkSwitchLinkAggregation(params *UpdateNetworkSwitchLinkAggregationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSwitchLinkAggregationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSwitchLinkAggregationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSwitchLinkAggregation",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/switch/linkAggregations/{linkAggregationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSwitchLinkAggregationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSwitchLinkAggregationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSwitchLinkAggregation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
