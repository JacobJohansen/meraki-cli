// Code generated by go-swagger; DO NOT EDIT.

package s_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkSmDevicesParams creates a new GetNetworkSmDevicesParams object
// with the default values initialized.
func NewGetNetworkSmDevicesParams() *GetNetworkSmDevicesParams {
	var ()
	return &GetNetworkSmDevicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkSmDevicesParamsWithTimeout creates a new GetNetworkSmDevicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworkSmDevicesParamsWithTimeout(timeout time.Duration) *GetNetworkSmDevicesParams {
	var ()
	return &GetNetworkSmDevicesParams{

		timeout: timeout,
	}
}

// NewGetNetworkSmDevicesParamsWithContext creates a new GetNetworkSmDevicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworkSmDevicesParamsWithContext(ctx context.Context) *GetNetworkSmDevicesParams {
	var ()
	return &GetNetworkSmDevicesParams{

		Context: ctx,
	}
}

// NewGetNetworkSmDevicesParamsWithHTTPClient creates a new GetNetworkSmDevicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworkSmDevicesParamsWithHTTPClient(client *http.Client) *GetNetworkSmDevicesParams {
	var ()
	return &GetNetworkSmDevicesParams{
		HTTPClient: client,
	}
}

/*GetNetworkSmDevicesParams contains all the parameters to send to the API endpoint
for the get network sm devices operation typically these are written to a http.Request
*/
type GetNetworkSmDevicesParams struct {

	/*BatchSize
	  Number of devices to return, 1000 is the default as well as the max.

	*/
	BatchSize *int32
	/*BatchToken
	  If the network has more devices than the batch size, a batch token will be returned
	    as a part of the device list. To see the remainder of the devices, pass in the batchToken as a parameter in the next request.
	    Requests made with the batchToken do not require additional parameters as the batchToken includes the parameters passed in
	    with the original request. Additional parameters passed in with the batchToken will be ignored.

	*/
	BatchToken *string
	/*Fields
	  Additional fields that will be displayed for each device. Multiple fields can be passed in as comma separated values.
	    The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,
	    systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,
	    ownerEmail, ownerUsername, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,
	    simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,
	    isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,
	    hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, and androidSecurityPatchVersion.

	*/
	Fields *string
	/*Ids
	  Filter devices by id(s). Multiple ids can be passed in as comma separated values.

	*/
	Ids *string
	/*NetworkID*/
	NetworkID string
	/*Scope
	  Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags as comma separated values.

	*/
	Scope *string
	/*Serials
	  Filter devices by serial(s). Multiple serials can be passed in as comma separated values.

	*/
	Serials *string
	/*WifiMacs
	  Filter devices by wifi mac(s). Multiple wifi macs can be passed in as comma separated values.

	*/
	WifiMacs *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithTimeout(timeout time.Duration) *GetNetworkSmDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithContext(ctx context.Context) *GetNetworkSmDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithHTTPClient(client *http.Client) *GetNetworkSmDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBatchSize adds the batchSize to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithBatchSize(batchSize *int32) *GetNetworkSmDevicesParams {
	o.SetBatchSize(batchSize)
	return o
}

// SetBatchSize adds the batchSize to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetBatchSize(batchSize *int32) {
	o.BatchSize = batchSize
}

// WithBatchToken adds the batchToken to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithBatchToken(batchToken *string) *GetNetworkSmDevicesParams {
	o.SetBatchToken(batchToken)
	return o
}

// SetBatchToken adds the batchToken to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetBatchToken(batchToken *string) {
	o.BatchToken = batchToken
}

// WithFields adds the fields to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithFields(fields *string) *GetNetworkSmDevicesParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithIds adds the ids to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithIds(ids *string) *GetNetworkSmDevicesParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetIds(ids *string) {
	o.Ids = ids
}

// WithNetworkID adds the networkID to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithNetworkID(networkID string) *GetNetworkSmDevicesParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithScope adds the scope to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithScope(scope *string) *GetNetworkSmDevicesParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithSerials adds the serials to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithSerials(serials *string) *GetNetworkSmDevicesParams {
	o.SetSerials(serials)
	return o
}

// SetSerials adds the serials to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetSerials(serials *string) {
	o.Serials = serials
}

// WithWifiMacs adds the wifiMacs to the get network sm devices params
func (o *GetNetworkSmDevicesParams) WithWifiMacs(wifiMacs *string) *GetNetworkSmDevicesParams {
	o.SetWifiMacs(wifiMacs)
	return o
}

// SetWifiMacs adds the wifiMacs to the get network sm devices params
func (o *GetNetworkSmDevicesParams) SetWifiMacs(wifiMacs *string) {
	o.WifiMacs = wifiMacs
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkSmDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BatchSize != nil {

		// query param batchSize
		var qrBatchSize int32
		if o.BatchSize != nil {
			qrBatchSize = *o.BatchSize
		}
		qBatchSize := swag.FormatInt32(qrBatchSize)
		if qBatchSize != "" {
			if err := r.SetQueryParam("batchSize", qBatchSize); err != nil {
				return err
			}
		}

	}

	if o.BatchToken != nil {

		// query param batchToken
		var qrBatchToken string
		if o.BatchToken != nil {
			qrBatchToken = *o.BatchToken
		}
		qBatchToken := qrBatchToken
		if qBatchToken != "" {
			if err := r.SetQueryParam("batchToken", qBatchToken); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Ids != nil {

		// query param ids
		var qrIds string
		if o.Ids != nil {
			qrIds = *o.Ids
		}
		qIds := qrIds
		if qIds != "" {
			if err := r.SetQueryParam("ids", qIds); err != nil {
				return err
			}
		}

	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if o.Serials != nil {

		// query param serials
		var qrSerials string
		if o.Serials != nil {
			qrSerials = *o.Serials
		}
		qSerials := qrSerials
		if qSerials != "" {
			if err := r.SetQueryParam("serials", qSerials); err != nil {
				return err
			}
		}

	}

	if o.WifiMacs != nil {

		// query param wifiMacs
		var qrWifiMacs string
		if o.WifiMacs != nil {
			qrWifiMacs = *o.WifiMacs
		}
		qWifiMacs := qrWifiMacs
		if qWifiMacs != "" {
			if err := r.SetQueryParam("wifiMacs", qWifiMacs); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
