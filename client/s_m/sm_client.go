// Code generated by go-swagger; DO NOT EDIT.

package s_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s m API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s m API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CheckinNetworkSmDevices(params *CheckinNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*CheckinNetworkSmDevicesOK, error)

	CreateNetworkSmAppPolaris(params *CreateNetworkSmAppPolarisParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSmAppPolarisOK, error)

	CreateNetworkSmBypassActivationLockAttempt(params *CreateNetworkSmBypassActivationLockAttemptParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSmBypassActivationLockAttemptCreated, error)

	DeleteNetworkSmAppPolaris(params *DeleteNetworkSmAppPolarisParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSmAppPolarisOK, error)

	GetNetworkSmAppPolaris(params *GetNetworkSmAppPolarisParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmAppPolarisOK, error)

	GetNetworkSmBypassActivationLockAttempt(params *GetNetworkSmBypassActivationLockAttemptParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmBypassActivationLockAttemptOK, error)

	GetNetworkSmCellularUsageHistory(params *GetNetworkSmCellularUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmCellularUsageHistoryOK, error)

	GetNetworkSmCerts(params *GetNetworkSmCertsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmCertsOK, error)

	GetNetworkSmConnectivity(params *GetNetworkSmConnectivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmConnectivityOK, error)

	GetNetworkSmDesktopLogs(params *GetNetworkSmDesktopLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmDesktopLogsOK, error)

	GetNetworkSmDeviceCommandLogs(params *GetNetworkSmDeviceCommandLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmDeviceCommandLogsOK, error)

	GetNetworkSmDeviceProfiles(params *GetNetworkSmDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmDeviceProfilesOK, error)

	GetNetworkSmDevices(params *GetNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmDevicesOK, error)

	GetNetworkSmNetworkAdapters(params *GetNetworkSmNetworkAdaptersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmNetworkAdaptersOK, error)

	GetNetworkSmPerformanceHistory(params *GetNetworkSmPerformanceHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmPerformanceHistoryOK, error)

	GetNetworkSmProfiles(params *GetNetworkSmProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmProfilesOK, error)

	GetNetworkSmRestrictions(params *GetNetworkSmRestrictionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmRestrictionsOK, error)

	GetNetworkSmSecurityCenters(params *GetNetworkSmSecurityCentersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmSecurityCentersOK, error)

	GetNetworkSmSoftwares(params *GetNetworkSmSoftwaresParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmSoftwaresOK, error)

	GetNetworkSmUserDeviceProfiles(params *GetNetworkSmUserDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmUserDeviceProfilesOK, error)

	GetNetworkSmUserSoftwares(params *GetNetworkSmUserSoftwaresParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmUserSoftwaresOK, error)

	GetNetworkSmUsers(params *GetNetworkSmUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmUsersOK, error)

	GetNetworkSmWlanLists(params *GetNetworkSmWlanListsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmWlanListsOK, error)

	LockNetworkSmDevices(params *LockNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*LockNetworkSmDevicesOK, error)

	MoveNetworkSmDevices(params *MoveNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*MoveNetworkSmDevicesOK, error)

	RefreshNetworkSmDeviceDetails(params *RefreshNetworkSmDeviceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*RefreshNetworkSmDeviceDetailsOK, error)

	UnenrollNetworkSmDevice(params *UnenrollNetworkSmDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*UnenrollNetworkSmDeviceOK, error)

	UpdateNetworkSmAppPolaris(params *UpdateNetworkSmAppPolarisParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSmAppPolarisOK, error)

	UpdateNetworkSmDeviceFields(params *UpdateNetworkSmDeviceFieldsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSmDeviceFieldsOK, error)

	UpdateNetworkSmDevicesTags(params *UpdateNetworkSmDevicesTagsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSmDevicesTagsOK, error)

	WipeNetworkSmDevice(params *WipeNetworkSmDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*WipeNetworkSmDeviceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckinNetworkSmDevices checkins network sm devices

  Force check-in a set of devices
*/
func (a *Client) CheckinNetworkSmDevices(params *CheckinNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*CheckinNetworkSmDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckinNetworkSmDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkinNetworkSmDevices",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/sm/devices/checkin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckinNetworkSmDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckinNetworkSmDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkinNetworkSmDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkSmAppPolaris creates network sm app polaris

  Create a new Polaris app
*/
func (a *Client) CreateNetworkSmAppPolaris(params *CreateNetworkSmAppPolarisParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSmAppPolarisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSmAppPolarisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkSmAppPolaris",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/app/polaris",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSmAppPolarisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSmAppPolarisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkSmAppPolaris: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkSmBypassActivationLockAttempt creates network sm bypass activation lock attempt

  Bypass activation lock attempt
*/
func (a *Client) CreateNetworkSmBypassActivationLockAttempt(params *CreateNetworkSmBypassActivationLockAttemptParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSmBypassActivationLockAttemptCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSmBypassActivationLockAttemptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkSmBypassActivationLockAttempt",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/bypassActivationLockAttempts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSmBypassActivationLockAttemptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSmBypassActivationLockAttemptCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkSmBypassActivationLockAttempt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkSmAppPolaris deletes network sm app polaris

  Delete a Cisco Polaris app
*/
func (a *Client) DeleteNetworkSmAppPolaris(params *DeleteNetworkSmAppPolarisParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSmAppPolarisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSmAppPolarisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkSmAppPolaris",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/sm/app/polaris/{appId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSmAppPolarisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSmAppPolarisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkSmAppPolaris: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmAppPolaris gets network sm app polaris

  Get details for a Cisco Polaris app if it exists
*/
func (a *Client) GetNetworkSmAppPolaris(params *GetNetworkSmAppPolarisParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmAppPolarisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmAppPolarisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmAppPolaris",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/app/polaris",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmAppPolarisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmAppPolarisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmAppPolaris: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmBypassActivationLockAttempt gets network sm bypass activation lock attempt

  Bypass activation lock attempt status
*/
func (a *Client) GetNetworkSmBypassActivationLockAttempt(params *GetNetworkSmBypassActivationLockAttemptParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmBypassActivationLockAttemptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmBypassActivationLockAttemptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmBypassActivationLockAttempt",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmBypassActivationLockAttemptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmBypassActivationLockAttemptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmBypassActivationLockAttempt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmCellularUsageHistory gets network sm cellular usage history

  Return the client's daily cellular data usage history. Usage data is in kilobytes.
*/
func (a *Client) GetNetworkSmCellularUsageHistory(params *GetNetworkSmCellularUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmCellularUsageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmCellularUsageHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmCellularUsageHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/{deviceId}/cellularUsageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmCellularUsageHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmCellularUsageHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmCellularUsageHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmCerts gets network sm certs

  List the certs on a device
*/
func (a *Client) GetNetworkSmCerts(params *GetNetworkSmCertsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmCertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmCertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmCerts",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/{deviceId}/certs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmCertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmCertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmCerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmConnectivity gets network sm connectivity

  Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
*/
func (a *Client) GetNetworkSmConnectivity(params *GetNetworkSmConnectivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmConnectivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmConnectivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmConnectivity",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/sm/{id}/connectivity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmConnectivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmConnectivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmConnectivity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDesktopLogs gets network sm desktop logs

  Return historical records of various Systems Manager network connection details for desktop devices.
*/
func (a *Client) GetNetworkSmDesktopLogs(params *GetNetworkSmDesktopLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmDesktopLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDesktopLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmDesktopLogs",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/sm/{id}/desktopLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDesktopLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDesktopLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDesktopLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceCommandLogs gets network sm device command logs

      Return historical records of commands sent to Systems Manager devices.
    <p>Note that this will include the name of the Dashboard user who initiated the command if it was generated
    by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out
    of any reports.</p>

*/
func (a *Client) GetNetworkSmDeviceCommandLogs(params *GetNetworkSmDeviceCommandLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmDeviceCommandLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceCommandLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceCommandLogs",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/sm/{id}/deviceCommandLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceCommandLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceCommandLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceCommandLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceProfiles gets network sm device profiles

  Get the profiles associated with a device
*/
func (a *Client) GetNetworkSmDeviceProfiles(params *GetNetworkSmDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmDeviceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/{deviceId}/deviceProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDevices gets network sm devices

  List the devices enrolled in an SM network with various specified fields and filters
*/
func (a *Client) GetNetworkSmDevices(params *GetNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmDevices",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmNetworkAdapters gets network sm network adapters

  List the network adapters of a device
*/
func (a *Client) GetNetworkSmNetworkAdapters(params *GetNetworkSmNetworkAdaptersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmNetworkAdaptersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmNetworkAdaptersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmNetworkAdapters",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/{deviceId}/networkAdapters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmNetworkAdaptersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmNetworkAdaptersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmNetworkAdapters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmPerformanceHistory gets network sm performance history

  Return historical records of various Systems Manager client metrics for desktop devices.
*/
func (a *Client) GetNetworkSmPerformanceHistory(params *GetNetworkSmPerformanceHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmPerformanceHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmPerformanceHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmPerformanceHistory",
		Method:             "GET",
		PathPattern:        "/networks/{network_id}/sm/{id}/performanceHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmPerformanceHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmPerformanceHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmPerformanceHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmProfiles gets network sm profiles

  List all the profiles in the network
*/
func (a *Client) GetNetworkSmProfiles(params *GetNetworkSmProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmRestrictions gets network sm restrictions

  List the restrictions on a device
*/
func (a *Client) GetNetworkSmRestrictions(params *GetNetworkSmRestrictionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmRestrictionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmRestrictionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmRestrictions",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/{deviceId}/restrictions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmRestrictionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmRestrictionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmRestrictions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmSecurityCenters gets network sm security centers

  List the security centers on a device
*/
func (a *Client) GetNetworkSmSecurityCenters(params *GetNetworkSmSecurityCentersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmSecurityCentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmSecurityCentersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmSecurityCenters",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/{deviceId}/securityCenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmSecurityCentersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmSecurityCentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmSecurityCenters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmSoftwares gets network sm softwares

  Get a list of softwares associated with a device
*/
func (a *Client) GetNetworkSmSoftwares(params *GetNetworkSmSoftwaresParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmSoftwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmSoftwaresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmSoftwares",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/{deviceId}/softwares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmSoftwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmSoftwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmSoftwares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmUserDeviceProfiles gets network sm user device profiles

  Get the profiles associated with a user
*/
func (a *Client) GetNetworkSmUserDeviceProfiles(params *GetNetworkSmUserDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmUserDeviceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmUserDeviceProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmUserDeviceProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/user/{userId}/deviceProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmUserDeviceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmUserDeviceProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmUserDeviceProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmUserSoftwares gets network sm user softwares

  Get a list of softwares associated with a user
*/
func (a *Client) GetNetworkSmUserSoftwares(params *GetNetworkSmUserSoftwaresParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmUserSoftwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmUserSoftwaresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmUserSoftwares",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/user/{userId}/softwares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmUserSoftwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmUserSoftwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmUserSoftwares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmUsers gets network sm users

  List the owners in an SM network with various specified fields and filters
*/
func (a *Client) GetNetworkSmUsers(params *GetNetworkSmUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmUsers",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmWlanLists gets network sm wlan lists

  List the saved SSID names on a device
*/
func (a *Client) GetNetworkSmWlanLists(params *GetNetworkSmWlanListsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSmWlanListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmWlanListsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSmWlanLists",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/{deviceId}/wlanLists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmWlanListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmWlanListsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmWlanLists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LockNetworkSmDevices locks network sm devices

  Lock a set of devices
*/
func (a *Client) LockNetworkSmDevices(params *LockNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*LockNetworkSmDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockNetworkSmDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lockNetworkSmDevices",
		Method:             "PUT",
		PathPattern:        "/networks/{network_id}/sm/devices/lock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LockNetworkSmDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockNetworkSmDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lockNetworkSmDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveNetworkSmDevices moves network sm devices

  Move a set of devices to a new network
*/
func (a *Client) MoveNetworkSmDevices(params *MoveNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*MoveNetworkSmDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveNetworkSmDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "moveNetworkSmDevices",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/sm/devices/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveNetworkSmDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveNetworkSmDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for moveNetworkSmDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RefreshNetworkSmDeviceDetails refreshes network sm device details

  Refresh the details of a device
*/
func (a *Client) RefreshNetworkSmDeviceDetails(params *RefreshNetworkSmDeviceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*RefreshNetworkSmDeviceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshNetworkSmDeviceDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "refreshNetworkSmDeviceDetails",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/device/{deviceId}/refreshDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshNetworkSmDeviceDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshNetworkSmDeviceDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshNetworkSmDeviceDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnenrollNetworkSmDevice unenrolls network sm device

  Unenroll a device
*/
func (a *Client) UnenrollNetworkSmDevice(params *UnenrollNetworkSmDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*UnenrollNetworkSmDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnenrollNetworkSmDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unenrollNetworkSmDevice",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/unenroll",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnenrollNetworkSmDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnenrollNetworkSmDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unenrollNetworkSmDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSmAppPolaris updates network sm app polaris

  Update an existing Polaris app
*/
func (a *Client) UpdateNetworkSmAppPolaris(params *UpdateNetworkSmAppPolarisParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSmAppPolarisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSmAppPolarisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSmAppPolaris",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/sm/app/polaris/{appId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSmAppPolarisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSmAppPolarisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSmAppPolaris: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSmDeviceFields updates network sm device fields

  Modify the fields of a device
*/
func (a *Client) UpdateNetworkSmDeviceFields(params *UpdateNetworkSmDeviceFieldsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSmDeviceFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSmDeviceFieldsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSmDeviceFields",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/sm/device/fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSmDeviceFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSmDeviceFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSmDeviceFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSmDevicesTags updates network sm devices tags

  Add, delete, or update the tags of a set of devices
*/
func (a *Client) UpdateNetworkSmDevicesTags(params *UpdateNetworkSmDevicesTagsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSmDevicesTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSmDevicesTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSmDevicesTags",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/sm/devices/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSmDevicesTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSmDevicesTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSmDevicesTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WipeNetworkSmDevice wipes network sm device

  Wipe a device
*/
func (a *Client) WipeNetworkSmDevice(params *WipeNetworkSmDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*WipeNetworkSmDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWipeNetworkSmDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "wipeNetworkSmDevice",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/sm/device/wipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WipeNetworkSmDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WipeNetworkSmDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for wipeNetworkSmDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
