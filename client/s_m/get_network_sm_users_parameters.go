// Code generated by go-swagger; DO NOT EDIT.

package s_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetNetworkSmUsersParams creates a new GetNetworkSmUsersParams object
// with the default values initialized.
func NewGetNetworkSmUsersParams() *GetNetworkSmUsersParams {
	var ()
	return &GetNetworkSmUsersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkSmUsersParamsWithTimeout creates a new GetNetworkSmUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworkSmUsersParamsWithTimeout(timeout time.Duration) *GetNetworkSmUsersParams {
	var ()
	return &GetNetworkSmUsersParams{

		timeout: timeout,
	}
}

// NewGetNetworkSmUsersParamsWithContext creates a new GetNetworkSmUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworkSmUsersParamsWithContext(ctx context.Context) *GetNetworkSmUsersParams {
	var ()
	return &GetNetworkSmUsersParams{

		Context: ctx,
	}
}

// NewGetNetworkSmUsersParamsWithHTTPClient creates a new GetNetworkSmUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworkSmUsersParamsWithHTTPClient(client *http.Client) *GetNetworkSmUsersParams {
	var ()
	return &GetNetworkSmUsersParams{
		HTTPClient: client,
	}
}

/*GetNetworkSmUsersParams contains all the parameters to send to the API endpoint
for the get network sm users operation typically these are written to a http.Request
*/
type GetNetworkSmUsersParams struct {

	/*Emails
	  Filter users by email(s). Multiple emails can be passed in as comma separated values.

	*/
	Emails *string
	/*Ids
	  Filter users by id(s). Multiple ids can be passed in as comma separated values.

	*/
	Ids *string
	/*NetworkID*/
	NetworkID string
	/*Scope
	  Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags as comma separated values.

	*/
	Scope *string
	/*Usernames
	  Filter users by username(s). Multiple usernames can be passed in as comma separated values.

	*/
	Usernames *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get network sm users params
func (o *GetNetworkSmUsersParams) WithTimeout(timeout time.Duration) *GetNetworkSmUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network sm users params
func (o *GetNetworkSmUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network sm users params
func (o *GetNetworkSmUsersParams) WithContext(ctx context.Context) *GetNetworkSmUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network sm users params
func (o *GetNetworkSmUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network sm users params
func (o *GetNetworkSmUsersParams) WithHTTPClient(client *http.Client) *GetNetworkSmUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network sm users params
func (o *GetNetworkSmUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmails adds the emails to the get network sm users params
func (o *GetNetworkSmUsersParams) WithEmails(emails *string) *GetNetworkSmUsersParams {
	o.SetEmails(emails)
	return o
}

// SetEmails adds the emails to the get network sm users params
func (o *GetNetworkSmUsersParams) SetEmails(emails *string) {
	o.Emails = emails
}

// WithIds adds the ids to the get network sm users params
func (o *GetNetworkSmUsersParams) WithIds(ids *string) *GetNetworkSmUsersParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get network sm users params
func (o *GetNetworkSmUsersParams) SetIds(ids *string) {
	o.Ids = ids
}

// WithNetworkID adds the networkID to the get network sm users params
func (o *GetNetworkSmUsersParams) WithNetworkID(networkID string) *GetNetworkSmUsersParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network sm users params
func (o *GetNetworkSmUsersParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithScope adds the scope to the get network sm users params
func (o *GetNetworkSmUsersParams) WithScope(scope *string) *GetNetworkSmUsersParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get network sm users params
func (o *GetNetworkSmUsersParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithUsernames adds the usernames to the get network sm users params
func (o *GetNetworkSmUsersParams) WithUsernames(usernames *string) *GetNetworkSmUsersParams {
	o.SetUsernames(usernames)
	return o
}

// SetUsernames adds the usernames to the get network sm users params
func (o *GetNetworkSmUsersParams) SetUsernames(usernames *string) {
	o.Usernames = usernames
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkSmUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Emails != nil {

		// query param emails
		var qrEmails string
		if o.Emails != nil {
			qrEmails = *o.Emails
		}
		qEmails := qrEmails
		if qEmails != "" {
			if err := r.SetQueryParam("emails", qEmails); err != nil {
				return err
			}
		}

	}

	if o.Ids != nil {

		// query param ids
		var qrIds string
		if o.Ids != nil {
			qrIds = *o.Ids
		}
		qIds := qrIds
		if qIds != "" {
			if err := r.SetQueryParam("ids", qIds); err != nil {
				return err
			}
		}

	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if o.Usernames != nil {

		// query param usernames
		var qrUsernames string
		if o.Usernames != nil {
			qrUsernames = *o.Usernames
		}
		qUsernames := qrUsernames
		if qUsernames != "" {
			if err := r.SetQueryParam("usernames", qUsernames); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
