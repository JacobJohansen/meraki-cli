// Code generated by go-swagger; DO NOT EDIT.

package m_x_1_1_n_a_t_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cisco-sso/meraki-cli/models"
)

// NewUpdateNetworkOneToOneNatRulesParams creates a new UpdateNetworkOneToOneNatRulesParams object
// with the default values initialized.
func NewUpdateNetworkOneToOneNatRulesParams() *UpdateNetworkOneToOneNatRulesParams {
	var ()
	return &UpdateNetworkOneToOneNatRulesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateNetworkOneToOneNatRulesParamsWithTimeout creates a new UpdateNetworkOneToOneNatRulesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateNetworkOneToOneNatRulesParamsWithTimeout(timeout time.Duration) *UpdateNetworkOneToOneNatRulesParams {
	var ()
	return &UpdateNetworkOneToOneNatRulesParams{

		timeout: timeout,
	}
}

// NewUpdateNetworkOneToOneNatRulesParamsWithContext creates a new UpdateNetworkOneToOneNatRulesParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateNetworkOneToOneNatRulesParamsWithContext(ctx context.Context) *UpdateNetworkOneToOneNatRulesParams {
	var ()
	return &UpdateNetworkOneToOneNatRulesParams{

		Context: ctx,
	}
}

// NewUpdateNetworkOneToOneNatRulesParamsWithHTTPClient creates a new UpdateNetworkOneToOneNatRulesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateNetworkOneToOneNatRulesParamsWithHTTPClient(client *http.Client) *UpdateNetworkOneToOneNatRulesParams {
	var ()
	return &UpdateNetworkOneToOneNatRulesParams{
		HTTPClient: client,
	}
}

/*UpdateNetworkOneToOneNatRulesParams contains all the parameters to send to the API endpoint
for the update network one to one nat rules operation typically these are written to a http.Request
*/
type UpdateNetworkOneToOneNatRulesParams struct {

	/*NetworkID*/
	NetworkID string
	/*UpdateNetworkOneToOneNatRules*/
	UpdateNetworkOneToOneNatRules *models.UpdateNetworkOneToOneNatRules

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) WithTimeout(timeout time.Duration) *UpdateNetworkOneToOneNatRulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) WithContext(ctx context.Context) *UpdateNetworkOneToOneNatRulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) WithHTTPClient(client *http.Client) *UpdateNetworkOneToOneNatRulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetworkID adds the networkID to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) WithNetworkID(networkID string) *UpdateNetworkOneToOneNatRulesParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithUpdateNetworkOneToOneNatRules adds the updateNetworkOneToOneNatRules to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) WithUpdateNetworkOneToOneNatRules(updateNetworkOneToOneNatRules *models.UpdateNetworkOneToOneNatRules) *UpdateNetworkOneToOneNatRulesParams {
	o.SetUpdateNetworkOneToOneNatRules(updateNetworkOneToOneNatRules)
	return o
}

// SetUpdateNetworkOneToOneNatRules adds the updateNetworkOneToOneNatRules to the update network one to one nat rules params
func (o *UpdateNetworkOneToOneNatRulesParams) SetUpdateNetworkOneToOneNatRules(updateNetworkOneToOneNatRules *models.UpdateNetworkOneToOneNatRules) {
	o.UpdateNetworkOneToOneNatRules = updateNetworkOneToOneNatRules
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateNetworkOneToOneNatRulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.UpdateNetworkOneToOneNatRules != nil {
		if err := r.SetBodyParam(o.UpdateNetworkOneToOneNatRules); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
