// Code generated by go-swagger; DO NOT EDIT.

package monitored_media_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitored media servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for monitored media servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOrganizationInsightMonitoredMediaServer(params *CreateOrganizationInsightMonitoredMediaServerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationInsightMonitoredMediaServerCreated, error)

	DeleteOrganizationInsightMonitoredMediaServer(params *DeleteOrganizationInsightMonitoredMediaServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationInsightMonitoredMediaServerNoContent, error)

	GetOrganizationInsightMonitoredMediaServer(params *GetOrganizationInsightMonitoredMediaServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationInsightMonitoredMediaServerOK, error)

	GetOrganizationInsightMonitoredMediaServers(params *GetOrganizationInsightMonitoredMediaServersParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationInsightMonitoredMediaServersOK, error)

	UpdateOrganizationInsightMonitoredMediaServer(params *UpdateOrganizationInsightMonitoredMediaServerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationInsightMonitoredMediaServerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateOrganizationInsightMonitoredMediaServer creates organization insight monitored media server

  Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
*/
func (a *Client) CreateOrganizationInsightMonitoredMediaServer(params *CreateOrganizationInsightMonitoredMediaServerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationInsightMonitoredMediaServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationInsightMonitoredMediaServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganizationInsightMonitoredMediaServer",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/insight/monitoredMediaServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationInsightMonitoredMediaServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationInsightMonitoredMediaServerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationInsightMonitoredMediaServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationInsightMonitoredMediaServer deletes organization insight monitored media server

  Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
*/
func (a *Client) DeleteOrganizationInsightMonitoredMediaServer(params *DeleteOrganizationInsightMonitoredMediaServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationInsightMonitoredMediaServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationInsightMonitoredMediaServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganizationInsightMonitoredMediaServer",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationInsightMonitoredMediaServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationInsightMonitoredMediaServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationInsightMonitoredMediaServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationInsightMonitoredMediaServer gets organization insight monitored media server

  Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
*/
func (a *Client) GetOrganizationInsightMonitoredMediaServer(params *GetOrganizationInsightMonitoredMediaServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationInsightMonitoredMediaServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationInsightMonitoredMediaServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationInsightMonitoredMediaServer",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationInsightMonitoredMediaServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationInsightMonitoredMediaServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationInsightMonitoredMediaServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationInsightMonitoredMediaServers gets organization insight monitored media servers

  List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
*/
func (a *Client) GetOrganizationInsightMonitoredMediaServers(params *GetOrganizationInsightMonitoredMediaServersParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationInsightMonitoredMediaServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationInsightMonitoredMediaServersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationInsightMonitoredMediaServers",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/insight/monitoredMediaServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationInsightMonitoredMediaServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationInsightMonitoredMediaServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationInsightMonitoredMediaServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationInsightMonitoredMediaServer updates organization insight monitored media server

  Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
*/
func (a *Client) UpdateOrganizationInsightMonitoredMediaServer(params *UpdateOrganizationInsightMonitoredMediaServerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationInsightMonitoredMediaServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationInsightMonitoredMediaServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganizationInsightMonitoredMediaServer",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationInsightMonitoredMediaServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationInsightMonitoredMediaServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationInsightMonitoredMediaServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
