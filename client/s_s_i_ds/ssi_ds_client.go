// Code generated by go-swagger; DO NOT EDIT.

package s_s_i_ds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s s i ds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s s i ds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetNetworkDeviceWirelessStatus(params *GetNetworkDeviceWirelessStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDeviceWirelessStatusOK, error)

	GetNetworkSsid(params *GetNetworkSsidParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSsidOK, error)

	GetNetworkSsids(params *GetNetworkSsidsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSsidsOK, error)

	UpdateNetworkSsid(params *UpdateNetworkSsidParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSsidOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetNetworkDeviceWirelessStatus gets network device wireless status

  Return the SSID statuses of an access point
*/
func (a *Client) GetNetworkDeviceWirelessStatus(params *GetNetworkDeviceWirelessStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDeviceWirelessStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDeviceWirelessStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDeviceWirelessStatus",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/devices/{serial}/wireless/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDeviceWirelessStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkDeviceWirelessStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkDeviceWirelessStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSsid gets network ssid

  Return a single SSID
*/
func (a *Client) GetNetworkSsid(params *GetNetworkSsidParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSsidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSsidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSsid",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/ssids/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSsidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSsidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSsid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSsids gets network ssids

  List the SSIDs in a network. Supports networks with access points or wireless-enabled security appliances and teleworker gateways.
*/
func (a *Client) GetNetworkSsids(params *GetNetworkSsidsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSsidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSsidsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSsids",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/ssids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSsidsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSsidsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSsids: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSsid updates network ssid

  Update the attributes of an SSID
*/
func (a *Client) UpdateNetworkSsid(params *UpdateNetworkSsidParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkSsidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSsidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkSsid",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/ssids/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSsidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSsidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSsid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
