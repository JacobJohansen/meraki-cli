// Code generated by go-swagger; DO NOT EDIT.

package switch_ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new switch ports API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for switch ports API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDeviceSwitchPort(params *GetDeviceSwitchPortParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceSwitchPortOK, error)

	GetDeviceSwitchPortStatuses(params *GetDeviceSwitchPortStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceSwitchPortStatusesOK, error)

	GetDeviceSwitchPortStatusesPackets(params *GetDeviceSwitchPortStatusesPacketsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceSwitchPortStatusesPacketsOK, error)

	GetDeviceSwitchPorts(params *GetDeviceSwitchPortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceSwitchPortsOK, error)

	UpdateDeviceSwitchPort(params *UpdateDeviceSwitchPortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceSwitchPortOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDeviceSwitchPort gets device switch port

  Return a switch port
*/
func (a *Client) GetDeviceSwitchPort(params *GetDeviceSwitchPortParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceSwitchPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceSwitchPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceSwitchPort",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/switchPorts/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceSwitchPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceSwitchPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceSwitchPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceSwitchPortStatuses gets device switch port statuses

  Return the status for all the ports of a switch
*/
func (a *Client) GetDeviceSwitchPortStatuses(params *GetDeviceSwitchPortStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceSwitchPortStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceSwitchPortStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceSwitchPortStatuses",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/switchPortStatuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceSwitchPortStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceSwitchPortStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceSwitchPortStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceSwitchPortStatusesPackets gets device switch port statuses packets

  Return the packet counters for all the ports of a switch
*/
func (a *Client) GetDeviceSwitchPortStatusesPackets(params *GetDeviceSwitchPortStatusesPacketsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceSwitchPortStatusesPacketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceSwitchPortStatusesPacketsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceSwitchPortStatusesPackets",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/switchPortStatuses/packets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceSwitchPortStatusesPacketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceSwitchPortStatusesPacketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceSwitchPortStatusesPackets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceSwitchPorts gets device switch ports

  List the switch ports for a switch
*/
func (a *Client) GetDeviceSwitchPorts(params *GetDeviceSwitchPortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceSwitchPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceSwitchPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceSwitchPorts",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/switchPorts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceSwitchPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceSwitchPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceSwitchPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceSwitchPort updates device switch port

  Update a switch port
*/
func (a *Client) UpdateDeviceSwitchPort(params *UpdateDeviceSwitchPortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceSwitchPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceSwitchPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceSwitchPort",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/switchPorts/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceSwitchPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceSwitchPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceSwitchPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
