// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkDeviceLldpCdpParams creates a new GetNetworkDeviceLldpCdpParams object
// with the default values initialized.
func NewGetNetworkDeviceLldpCdpParams() *GetNetworkDeviceLldpCdpParams {
	var ()
	return &GetNetworkDeviceLldpCdpParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkDeviceLldpCdpParamsWithTimeout creates a new GetNetworkDeviceLldpCdpParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworkDeviceLldpCdpParamsWithTimeout(timeout time.Duration) *GetNetworkDeviceLldpCdpParams {
	var ()
	return &GetNetworkDeviceLldpCdpParams{

		timeout: timeout,
	}
}

// NewGetNetworkDeviceLldpCdpParamsWithContext creates a new GetNetworkDeviceLldpCdpParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworkDeviceLldpCdpParamsWithContext(ctx context.Context) *GetNetworkDeviceLldpCdpParams {
	var ()
	return &GetNetworkDeviceLldpCdpParams{

		Context: ctx,
	}
}

// NewGetNetworkDeviceLldpCdpParamsWithHTTPClient creates a new GetNetworkDeviceLldpCdpParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworkDeviceLldpCdpParamsWithHTTPClient(client *http.Client) *GetNetworkDeviceLldpCdpParams {
	var ()
	return &GetNetworkDeviceLldpCdpParams{
		HTTPClient: client,
	}
}

/*GetNetworkDeviceLldpCdpParams contains all the parameters to send to the API endpoint
for the get network device lldp cdp operation typically these are written to a http.Request
*/
type GetNetworkDeviceLldpCdpParams struct {

	/*NetworkID*/
	NetworkID string
	/*Serial*/
	Serial string
	/*Timespan
	  The timespan for which LLDP and CDP information will be fetched. Must be in seconds and less than or equal to a month (2592000 seconds). LLDP and CDP information is sent to the Meraki dashboard every 10 minutes. In instances where this LLDP and CDP information matches an existing entry in the Meraki dashboard, the data is updated once every two hours. Meraki recommends querying LLDP and CDP information at an interval slightly greater than two hours, to ensure that unchanged CDP / LLDP information can be queried consistently.

	*/
	Timespan *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) WithTimeout(timeout time.Duration) *GetNetworkDeviceLldpCdpParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) WithContext(ctx context.Context) *GetNetworkDeviceLldpCdpParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) WithHTTPClient(client *http.Client) *GetNetworkDeviceLldpCdpParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetworkID adds the networkID to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) WithNetworkID(networkID string) *GetNetworkDeviceLldpCdpParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithSerial adds the serial to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) WithSerial(serial string) *GetNetworkDeviceLldpCdpParams {
	o.SetSerial(serial)
	return o
}

// SetSerial adds the serial to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) SetSerial(serial string) {
	o.Serial = serial
}

// WithTimespan adds the timespan to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) WithTimespan(timespan *int32) *GetNetworkDeviceLldpCdpParams {
	o.SetTimespan(timespan)
	return o
}

// SetTimespan adds the timespan to the get network device lldp cdp params
func (o *GetNetworkDeviceLldpCdpParams) SetTimespan(timespan *int32) {
	o.Timespan = timespan
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkDeviceLldpCdpParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	// path param serial
	if err := r.SetPathParam("serial", o.Serial); err != nil {
		return err
	}

	if o.Timespan != nil {

		// query param timespan
		var qrTimespan int32
		if o.Timespan != nil {
			qrTimespan = *o.Timespan
		}
		qTimespan := swag.FormatInt32(qrTimespan)
		if qTimespan != "" {
			if err := r.SetQueryParam("timespan", qTimespan); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
