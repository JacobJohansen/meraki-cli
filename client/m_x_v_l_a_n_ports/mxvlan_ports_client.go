// Code generated by go-swagger; DO NOT EDIT.

package m_x_v_l_a_n_ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new m x v l a n ports API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for m x v l a n ports API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetNetworkAppliancePort(params *GetNetworkAppliancePortParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkAppliancePortOK, error)

	GetNetworkAppliancePorts(params *GetNetworkAppliancePortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkAppliancePortsOK, error)

	UpdateNetworkAppliancePort(params *UpdateNetworkAppliancePortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkAppliancePortOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetNetworkAppliancePort gets network appliance port

  Return per-port VLAN settings for a single MX port.
*/
func (a *Client) GetNetworkAppliancePort(params *GetNetworkAppliancePortParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkAppliancePortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkAppliancePortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkAppliancePort",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliancePorts/{appliancePortId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkAppliancePortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkAppliancePortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkAppliancePort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkAppliancePorts gets network appliance ports

  List per-port VLAN settings for all ports of a MX.
*/
func (a *Client) GetNetworkAppliancePorts(params *GetNetworkAppliancePortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkAppliancePortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkAppliancePortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkAppliancePorts",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliancePorts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkAppliancePortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkAppliancePortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkAppliancePorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkAppliancePort updates network appliance port

  Update the per-port VLAN settings for a single MX port.
*/
func (a *Client) UpdateNetworkAppliancePort(params *UpdateNetworkAppliancePortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkAppliancePortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkAppliancePortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkAppliancePort",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliancePorts/{appliancePortId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkAppliancePortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkAppliancePortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkAppliancePort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
