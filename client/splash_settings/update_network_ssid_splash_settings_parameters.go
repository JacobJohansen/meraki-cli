// Code generated by go-swagger; DO NOT EDIT.

package splash_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cisco-sso/meraki-cli/models"
)

// NewUpdateNetworkSsidSplashSettingsParams creates a new UpdateNetworkSsidSplashSettingsParams object
// with the default values initialized.
func NewUpdateNetworkSsidSplashSettingsParams() *UpdateNetworkSsidSplashSettingsParams {
	var ()
	return &UpdateNetworkSsidSplashSettingsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateNetworkSsidSplashSettingsParamsWithTimeout creates a new UpdateNetworkSsidSplashSettingsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateNetworkSsidSplashSettingsParamsWithTimeout(timeout time.Duration) *UpdateNetworkSsidSplashSettingsParams {
	var ()
	return &UpdateNetworkSsidSplashSettingsParams{

		timeout: timeout,
	}
}

// NewUpdateNetworkSsidSplashSettingsParamsWithContext creates a new UpdateNetworkSsidSplashSettingsParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateNetworkSsidSplashSettingsParamsWithContext(ctx context.Context) *UpdateNetworkSsidSplashSettingsParams {
	var ()
	return &UpdateNetworkSsidSplashSettingsParams{

		Context: ctx,
	}
}

// NewUpdateNetworkSsidSplashSettingsParamsWithHTTPClient creates a new UpdateNetworkSsidSplashSettingsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateNetworkSsidSplashSettingsParamsWithHTTPClient(client *http.Client) *UpdateNetworkSsidSplashSettingsParams {
	var ()
	return &UpdateNetworkSsidSplashSettingsParams{
		HTTPClient: client,
	}
}

/*UpdateNetworkSsidSplashSettingsParams contains all the parameters to send to the API endpoint
for the update network ssid splash settings operation typically these are written to a http.Request
*/
type UpdateNetworkSsidSplashSettingsParams struct {

	/*NetworkID*/
	NetworkID string
	/*Number*/
	Number string
	/*UpdateNetworkSsidSplashSettings*/
	UpdateNetworkSsidSplashSettings *models.UpdateNetworkSsidSplashSettings

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) WithTimeout(timeout time.Duration) *UpdateNetworkSsidSplashSettingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) WithContext(ctx context.Context) *UpdateNetworkSsidSplashSettingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) WithHTTPClient(client *http.Client) *UpdateNetworkSsidSplashSettingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetworkID adds the networkID to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) WithNetworkID(networkID string) *UpdateNetworkSsidSplashSettingsParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithNumber adds the number to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) WithNumber(number string) *UpdateNetworkSsidSplashSettingsParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) SetNumber(number string) {
	o.Number = number
}

// WithUpdateNetworkSsidSplashSettings adds the updateNetworkSsidSplashSettings to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) WithUpdateNetworkSsidSplashSettings(updateNetworkSsidSplashSettings *models.UpdateNetworkSsidSplashSettings) *UpdateNetworkSsidSplashSettingsParams {
	o.SetUpdateNetworkSsidSplashSettings(updateNetworkSsidSplashSettings)
	return o
}

// SetUpdateNetworkSsidSplashSettings adds the updateNetworkSsidSplashSettings to the update network ssid splash settings params
func (o *UpdateNetworkSsidSplashSettingsParams) SetUpdateNetworkSsidSplashSettings(updateNetworkSsidSplashSettings *models.UpdateNetworkSsidSplashSettings) {
	o.UpdateNetworkSsidSplashSettings = updateNetworkSsidSplashSettings
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateNetworkSsidSplashSettingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	// path param number
	if err := r.SetPathParam("number", o.Number); err != nil {
		return err
	}

	if o.UpdateNetworkSsidSplashSettings != nil {
		if err := r.SetBodyParam(o.UpdateNetworkSsidSplashSettings); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
