// Code generated by go-swagger; DO NOT EDIT.

package v_l_a_ns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new v l a ns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v l a ns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkVlan(params *CreateNetworkVlanParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkVlanCreated, error)

	DeleteNetworkVlan(params *DeleteNetworkVlanParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkVlanNoContent, error)

	GetNetworkVlan(params *GetNetworkVlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkVlanOK, error)

	GetNetworkVlans(params *GetNetworkVlansParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkVlansOK, error)

	GetNetworkVlansEnabledState(params *GetNetworkVlansEnabledStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkVlansEnabledStateOK, error)

	UpdateNetworkVlan(params *UpdateNetworkVlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkVlanOK, error)

	UpdateNetworkVlansEnabledState(params *UpdateNetworkVlansEnabledStateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkVlansEnabledStateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkVlan creates network vlan

  Add a VLAN
*/
func (a *Client) CreateNetworkVlan(params *CreateNetworkVlanParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkVlanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkVlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkVlan",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkVlanCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkVlan deletes network vlan

  Delete a VLAN from a network
*/
func (a *Client) DeleteNetworkVlan(params *DeleteNetworkVlanParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkVlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkVlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkVlan",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/vlans/{vlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkVlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkVlan gets network vlan

  Return a VLAN
*/
func (a *Client) GetNetworkVlan(params *GetNetworkVlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkVlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkVlan",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/vlans/{vlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkVlans gets network vlans

  List the VLANs for an MX network
*/
func (a *Client) GetNetworkVlans(params *GetNetworkVlansParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkVlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkVlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkVlans",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkVlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkVlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkVlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkVlansEnabledState gets network vlans enabled state

  Returns the enabled status of VLANs for the network
*/
func (a *Client) GetNetworkVlansEnabledState(params *GetNetworkVlansEnabledStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkVlansEnabledStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkVlansEnabledStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkVlansEnabledState",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/vlansEnabledState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkVlansEnabledStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkVlansEnabledStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkVlansEnabledState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkVlan updates network vlan

  Update a VLAN
*/
func (a *Client) UpdateNetworkVlan(params *UpdateNetworkVlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkVlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkVlan",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/vlans/{vlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkVlansEnabledState updates network vlans enabled state

  Enable/Disable VLANs for the given network
*/
func (a *Client) UpdateNetworkVlansEnabledState(params *UpdateNetworkVlansEnabledStateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkVlansEnabledStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkVlansEnabledStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkVlansEnabledState",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/vlansEnabledState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkVlansEnabledStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkVlansEnabledStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkVlansEnabledState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
