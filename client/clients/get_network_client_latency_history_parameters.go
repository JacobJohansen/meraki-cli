// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkClientLatencyHistoryParams creates a new GetNetworkClientLatencyHistoryParams object
// with the default values initialized.
func NewGetNetworkClientLatencyHistoryParams() *GetNetworkClientLatencyHistoryParams {
	var ()
	return &GetNetworkClientLatencyHistoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkClientLatencyHistoryParamsWithTimeout creates a new GetNetworkClientLatencyHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworkClientLatencyHistoryParamsWithTimeout(timeout time.Duration) *GetNetworkClientLatencyHistoryParams {
	var ()
	return &GetNetworkClientLatencyHistoryParams{

		timeout: timeout,
	}
}

// NewGetNetworkClientLatencyHistoryParamsWithContext creates a new GetNetworkClientLatencyHistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworkClientLatencyHistoryParamsWithContext(ctx context.Context) *GetNetworkClientLatencyHistoryParams {
	var ()
	return &GetNetworkClientLatencyHistoryParams{

		Context: ctx,
	}
}

// NewGetNetworkClientLatencyHistoryParamsWithHTTPClient creates a new GetNetworkClientLatencyHistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworkClientLatencyHistoryParamsWithHTTPClient(client *http.Client) *GetNetworkClientLatencyHistoryParams {
	var ()
	return &GetNetworkClientLatencyHistoryParams{
		HTTPClient: client,
	}
}

/*GetNetworkClientLatencyHistoryParams contains all the parameters to send to the API endpoint
for the get network client latency history operation typically these are written to a http.Request
*/
type GetNetworkClientLatencyHistoryParams struct {

	/*ClientID*/
	ClientID string
	/*NetworkID*/
	NetworkID string
	/*Resolution
	  The time resolution in seconds for returned data. The valid resolutions are: 86400. The default is 86400.

	*/
	Resolution *int32
	/*T0
	  The beginning of the timespan for the data. The maximum lookback period is 791 days from today.

	*/
	T0 *string
	/*T1
	  The end of the timespan for the data. t1 can be a maximum of 791 days after t0.

	*/
	T1 *string
	/*Timespan
	  The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 1 day.

	*/
	Timespan *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) WithTimeout(timeout time.Duration) *GetNetworkClientLatencyHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) WithContext(ctx context.Context) *GetNetworkClientLatencyHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) WithHTTPClient(client *http.Client) *GetNetworkClientLatencyHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) WithClientID(clientID string) *GetNetworkClientLatencyHistoryParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithNetworkID adds the networkID to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) WithNetworkID(networkID string) *GetNetworkClientLatencyHistoryParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithResolution adds the resolution to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) WithResolution(resolution *int32) *GetNetworkClientLatencyHistoryParams {
	o.SetResolution(resolution)
	return o
}

// SetResolution adds the resolution to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) SetResolution(resolution *int32) {
	o.Resolution = resolution
}

// WithT0 adds the t0 to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) WithT0(t0 *string) *GetNetworkClientLatencyHistoryParams {
	o.SetT0(t0)
	return o
}

// SetT0 adds the t0 to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) SetT0(t0 *string) {
	o.T0 = t0
}

// WithT1 adds the t1 to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) WithT1(t1 *string) *GetNetworkClientLatencyHistoryParams {
	o.SetT1(t1)
	return o
}

// SetT1 adds the t1 to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) SetT1(t1 *string) {
	o.T1 = t1
}

// WithTimespan adds the timespan to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) WithTimespan(timespan *float64) *GetNetworkClientLatencyHistoryParams {
	o.SetTimespan(timespan)
	return o
}

// SetTimespan adds the timespan to the get network client latency history params
func (o *GetNetworkClientLatencyHistoryParams) SetTimespan(timespan *float64) {
	o.Timespan = timespan
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkClientLatencyHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clientId
	if err := r.SetPathParam("clientId", o.ClientID); err != nil {
		return err
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.Resolution != nil {

		// query param resolution
		var qrResolution int32
		if o.Resolution != nil {
			qrResolution = *o.Resolution
		}
		qResolution := swag.FormatInt32(qrResolution)
		if qResolution != "" {
			if err := r.SetQueryParam("resolution", qResolution); err != nil {
				return err
			}
		}

	}

	if o.T0 != nil {

		// query param t0
		var qrT0 string
		if o.T0 != nil {
			qrT0 = *o.T0
		}
		qT0 := qrT0
		if qT0 != "" {
			if err := r.SetQueryParam("t0", qT0); err != nil {
				return err
			}
		}

	}

	if o.T1 != nil {

		// query param t1
		var qrT1 string
		if o.T1 != nil {
			qrT1 = *o.T1
		}
		qT1 := qrT1
		if qT1 != "" {
			if err := r.SetQueryParam("t1", qT1); err != nil {
				return err
			}
		}

	}

	if o.Timespan != nil {

		// query param timespan
		var qrTimespan float64
		if o.Timespan != nil {
			qrTimespan = *o.Timespan
		}
		qTimespan := swag.FormatFloat64(qrTimespan)
		if qTimespan != "" {
			if err := r.SetQueryParam("timespan", qTimespan); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
