// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clients API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clients API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDeviceClients(params *GetDeviceClientsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceClientsOK, error)

	GetNetworkClient(params *GetNetworkClientParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientOK, error)

	GetNetworkClientEvents(params *GetNetworkClientEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientEventsOK, error)

	GetNetworkClientLatencyHistory(params *GetNetworkClientLatencyHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientLatencyHistoryOK, error)

	GetNetworkClientPolicy(params *GetNetworkClientPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientPolicyOK, error)

	GetNetworkClientSplashAuthorizationStatus(params *GetNetworkClientSplashAuthorizationStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientSplashAuthorizationStatusOK, error)

	GetNetworkClientTrafficHistory(params *GetNetworkClientTrafficHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientTrafficHistoryOK, error)

	GetNetworkClientUsageHistory(params *GetNetworkClientUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientUsageHistoryOK, error)

	GetNetworkClients(params *GetNetworkClientsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientsOK, error)

	ProvisionNetworkClients(params *ProvisionNetworkClientsParams, authInfo runtime.ClientAuthInfoWriter) (*ProvisionNetworkClientsCreated, error)

	UpdateNetworkClientPolicy(params *UpdateNetworkClientPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkClientPolicyOK, error)

	UpdateNetworkClientSplashAuthorizationStatus(params *UpdateNetworkClientSplashAuthorizationStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkClientSplashAuthorizationStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDeviceClients gets device clients

  List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
*/
func (a *Client) GetDeviceClients(params *GetDeviceClientsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceClientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceClients",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClient gets network client

  Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClient(params *GetNetworkClientParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClient",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientEvents gets network client events

  Return the events associated with this client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientEvents(params *GetNetworkClientEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientEvents",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientLatencyHistory gets network client latency history

  Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
*/
func (a *Client) GetNetworkClientLatencyHistory(params *GetNetworkClientLatencyHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientLatencyHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientLatencyHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientLatencyHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/latencyHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientLatencyHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientLatencyHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientLatencyHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientPolicy gets network client policy

  Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientPolicy(params *GetNetworkClientPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientPolicy",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientSplashAuthorizationStatus gets network client splash authorization status

  Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientSplashAuthorizationStatus(params *GetNetworkClientSplashAuthorizationStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientSplashAuthorizationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientSplashAuthorizationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientSplashAuthorizationStatus",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientSplashAuthorizationStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientSplashAuthorizationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientSplashAuthorizationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientTrafficHistory gets network client traffic history

  Return the client's network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide > General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientTrafficHistory(params *GetNetworkClientTrafficHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientTrafficHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientTrafficHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientTrafficHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/trafficHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientTrafficHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientTrafficHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientTrafficHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientUsageHistory gets network client usage history

  Return the client's daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientUsageHistory(params *GetNetworkClientUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientUsageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientUsageHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientUsageHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/usageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientUsageHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientUsageHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientUsageHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClients gets network clients

  List the clients that have used this network in the timespan
*/
func (a *Client) GetNetworkClients(params *GetNetworkClientsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClients",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvisionNetworkClients provisions network clients

  Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
*/
func (a *Client) ProvisionNetworkClients(params *ProvisionNetworkClientsParams, authInfo runtime.ClientAuthInfoWriter) (*ProvisionNetworkClientsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionNetworkClientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "provisionNetworkClients",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/clients/provision",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisionNetworkClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionNetworkClientsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for provisionNetworkClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkClientPolicy updates network client policy

  Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) UpdateNetworkClientPolicy(params *UpdateNetworkClientPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkClientPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkClientPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkClientPolicy",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkClientPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkClientPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkClientPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkClientSplashAuthorizationStatus updates network client splash authorization status

  Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) UpdateNetworkClientSplashAuthorizationStatus(params *UpdateNetworkClientSplashAuthorizationStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkClientSplashAuthorizationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkClientSplashAuthorizationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkClientSplashAuthorizationStatus",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkClientSplashAuthorizationStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkClientSplashAuthorizationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkClientSplashAuthorizationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
