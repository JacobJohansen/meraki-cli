// Code generated by go-swagger; DO NOT EDIT.

package switch_stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new switch stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for switch stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddNetworkSwitchStack(params *AddNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*AddNetworkSwitchStackOK, error)

	CreateNetworkSwitchStack(params *CreateNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSwitchStackCreated, error)

	DeleteNetworkSwitchStack(params *DeleteNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSwitchStackNoContent, error)

	GetNetworkSwitchStack(params *GetNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchStackOK, error)

	GetNetworkSwitchStacks(params *GetNetworkSwitchStacksParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchStacksOK, error)

	RemoveNetworkSwitchStack(params *RemoveNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveNetworkSwitchStackOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddNetworkSwitchStack adds network switch stack

  Add a switch to a stack
*/
func (a *Client) AddNetworkSwitchStack(params *AddNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*AddNetworkSwitchStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddNetworkSwitchStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addNetworkSwitchStack",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/switchStacks/{switchStackId}/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddNetworkSwitchStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddNetworkSwitchStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addNetworkSwitchStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkSwitchStack creates network switch stack

  Create a stack
*/
func (a *Client) CreateNetworkSwitchStack(params *CreateNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkSwitchStackCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSwitchStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkSwitchStack",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/switchStacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSwitchStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSwitchStackCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkSwitchStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkSwitchStack deletes network switch stack

  Delete a stack
*/
func (a *Client) DeleteNetworkSwitchStack(params *DeleteNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkSwitchStackNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSwitchStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkSwitchStack",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/switchStacks/{switchStackId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSwitchStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSwitchStackNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkSwitchStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchStack gets network switch stack

  Show a switch stack
*/
func (a *Client) GetNetworkSwitchStack(params *GetNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchStack",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switchStacks/{switchStackId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSwitchStacks gets network switch stacks

  List the switch stacks in a network
*/
func (a *Client) GetNetworkSwitchStacks(params *GetNetworkSwitchStacksParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSwitchStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSwitchStacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSwitchStacks",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/switchStacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSwitchStacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSwitchStacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSwitchStacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveNetworkSwitchStack removes network switch stack

  Remove a switch from a stack
*/
func (a *Client) RemoveNetworkSwitchStack(params *RemoveNetworkSwitchStackParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveNetworkSwitchStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveNetworkSwitchStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeNetworkSwitchStack",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/switchStacks/{switchStackId}/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveNetworkSwitchStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveNetworkSwitchStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeNetworkSwitchStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
