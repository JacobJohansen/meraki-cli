// Code generated by go-swagger; DO NOT EDIT.

package s_a_m_l_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s a m l roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s a m l roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOrganizationSamlRole(params *CreateOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationSamlRoleCreated, error)

	DeleteOrganizationSamlRole(params *DeleteOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationSamlRoleNoContent, error)

	GetOrganizationSamlRole(params *GetOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationSamlRoleOK, error)

	GetOrganizationSamlRoles(params *GetOrganizationSamlRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationSamlRolesOK, error)

	UpdateOrganizationSamlRole(params *UpdateOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationSamlRoleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateOrganizationSamlRole creates organization saml role

  Create a SAML role
*/
func (a *Client) CreateOrganizationSamlRole(params *CreateOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationSamlRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationSamlRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganizationSamlRole",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/samlRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationSamlRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationSamlRoleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationSamlRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationSamlRole deletes organization saml role

  Remove a SAML role
*/
func (a *Client) DeleteOrganizationSamlRole(params *DeleteOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationSamlRoleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationSamlRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganizationSamlRole",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/samlRoles/{samlRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationSamlRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationSamlRoleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationSamlRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSamlRole gets organization saml role

  Return a SAML role
*/
func (a *Client) GetOrganizationSamlRole(params *GetOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationSamlRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSamlRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationSamlRole",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/samlRoles/{samlRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSamlRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSamlRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSamlRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSamlRoles gets organization saml roles

  List the SAML roles for this organization
*/
func (a *Client) GetOrganizationSamlRoles(params *GetOrganizationSamlRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationSamlRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSamlRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationSamlRoles",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/samlRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSamlRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSamlRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSamlRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationSamlRole updates organization saml role

  Update a SAML role
*/
func (a *Client) UpdateOrganizationSamlRole(params *UpdateOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationSamlRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationSamlRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganizationSamlRole",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/samlRoles/{samlRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationSamlRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationSamlRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationSamlRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
