// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationInventoryParams creates a new GetOrganizationInventoryParams object
// with the default values initialized.
func NewGetOrganizationInventoryParams() *GetOrganizationInventoryParams {
	var ()
	return &GetOrganizationInventoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationInventoryParamsWithTimeout creates a new GetOrganizationInventoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrganizationInventoryParamsWithTimeout(timeout time.Duration) *GetOrganizationInventoryParams {
	var ()
	return &GetOrganizationInventoryParams{

		timeout: timeout,
	}
}

// NewGetOrganizationInventoryParamsWithContext creates a new GetOrganizationInventoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrganizationInventoryParamsWithContext(ctx context.Context) *GetOrganizationInventoryParams {
	var ()
	return &GetOrganizationInventoryParams{

		Context: ctx,
	}
}

// NewGetOrganizationInventoryParamsWithHTTPClient creates a new GetOrganizationInventoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrganizationInventoryParamsWithHTTPClient(client *http.Client) *GetOrganizationInventoryParams {
	var ()
	return &GetOrganizationInventoryParams{
		HTTPClient: client,
	}
}

/*GetOrganizationInventoryParams contains all the parameters to send to the API endpoint
for the get organization inventory operation typically these are written to a http.Request
*/
type GetOrganizationInventoryParams struct {

	/*IncludeLicenseInfo
	  When this parameter is true, each entity in the response will include the license expiration date of the device (if any). Only applies to organizations that support per-device licensing. Defaults to false.

	*/
	IncludeLicenseInfo *bool
	/*OrganizationID*/
	OrganizationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get organization inventory params
func (o *GetOrganizationInventoryParams) WithTimeout(timeout time.Duration) *GetOrganizationInventoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization inventory params
func (o *GetOrganizationInventoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization inventory params
func (o *GetOrganizationInventoryParams) WithContext(ctx context.Context) *GetOrganizationInventoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization inventory params
func (o *GetOrganizationInventoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization inventory params
func (o *GetOrganizationInventoryParams) WithHTTPClient(client *http.Client) *GetOrganizationInventoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization inventory params
func (o *GetOrganizationInventoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeLicenseInfo adds the includeLicenseInfo to the get organization inventory params
func (o *GetOrganizationInventoryParams) WithIncludeLicenseInfo(includeLicenseInfo *bool) *GetOrganizationInventoryParams {
	o.SetIncludeLicenseInfo(includeLicenseInfo)
	return o
}

// SetIncludeLicenseInfo adds the includeLicenseInfo to the get organization inventory params
func (o *GetOrganizationInventoryParams) SetIncludeLicenseInfo(includeLicenseInfo *bool) {
	o.IncludeLicenseInfo = includeLicenseInfo
}

// WithOrganizationID adds the organizationID to the get organization inventory params
func (o *GetOrganizationInventoryParams) WithOrganizationID(organizationID string) *GetOrganizationInventoryParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get organization inventory params
func (o *GetOrganizationInventoryParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationInventoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeLicenseInfo != nil {

		// query param includeLicenseInfo
		var qrIncludeLicenseInfo bool
		if o.IncludeLicenseInfo != nil {
			qrIncludeLicenseInfo = *o.IncludeLicenseInfo
		}
		qIncludeLicenseInfo := swag.FormatBool(qrIncludeLicenseInfo)
		if qIncludeLicenseInfo != "" {
			if err := r.SetQueryParam("includeLicenseInfo", qIncludeLicenseInfo); err != nil {
				return err
			}
		}

	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
