// Code generated by go-swagger; DO NOT EDIT.

package dashboard_branding_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cisco-sso/meraki-cli/models"
)

// NewUpdateOrganizationBrandingPoliciesPrioritiesParams creates a new UpdateOrganizationBrandingPoliciesPrioritiesParams object
// with the default values initialized.
func NewUpdateOrganizationBrandingPoliciesPrioritiesParams() *UpdateOrganizationBrandingPoliciesPrioritiesParams {
	var ()
	return &UpdateOrganizationBrandingPoliciesPrioritiesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateOrganizationBrandingPoliciesPrioritiesParamsWithTimeout creates a new UpdateOrganizationBrandingPoliciesPrioritiesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateOrganizationBrandingPoliciesPrioritiesParamsWithTimeout(timeout time.Duration) *UpdateOrganizationBrandingPoliciesPrioritiesParams {
	var ()
	return &UpdateOrganizationBrandingPoliciesPrioritiesParams{

		timeout: timeout,
	}
}

// NewUpdateOrganizationBrandingPoliciesPrioritiesParamsWithContext creates a new UpdateOrganizationBrandingPoliciesPrioritiesParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateOrganizationBrandingPoliciesPrioritiesParamsWithContext(ctx context.Context) *UpdateOrganizationBrandingPoliciesPrioritiesParams {
	var ()
	return &UpdateOrganizationBrandingPoliciesPrioritiesParams{

		Context: ctx,
	}
}

// NewUpdateOrganizationBrandingPoliciesPrioritiesParamsWithHTTPClient creates a new UpdateOrganizationBrandingPoliciesPrioritiesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateOrganizationBrandingPoliciesPrioritiesParamsWithHTTPClient(client *http.Client) *UpdateOrganizationBrandingPoliciesPrioritiesParams {
	var ()
	return &UpdateOrganizationBrandingPoliciesPrioritiesParams{
		HTTPClient: client,
	}
}

/*UpdateOrganizationBrandingPoliciesPrioritiesParams contains all the parameters to send to the API endpoint
for the update organization branding policies priorities operation typically these are written to a http.Request
*/
type UpdateOrganizationBrandingPoliciesPrioritiesParams struct {

	/*OrganizationID*/
	OrganizationID string
	/*UpdateOrganizationBrandingPoliciesPriorities*/
	UpdateOrganizationBrandingPoliciesPriorities *models.UpdateOrganizationBrandingPoliciesPriorities

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) WithTimeout(timeout time.Duration) *UpdateOrganizationBrandingPoliciesPrioritiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) WithContext(ctx context.Context) *UpdateOrganizationBrandingPoliciesPrioritiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) WithHTTPClient(client *http.Client) *UpdateOrganizationBrandingPoliciesPrioritiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationID adds the organizationID to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) WithOrganizationID(organizationID string) *UpdateOrganizationBrandingPoliciesPrioritiesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithUpdateOrganizationBrandingPoliciesPriorities adds the updateOrganizationBrandingPoliciesPriorities to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) WithUpdateOrganizationBrandingPoliciesPriorities(updateOrganizationBrandingPoliciesPriorities *models.UpdateOrganizationBrandingPoliciesPriorities) *UpdateOrganizationBrandingPoliciesPrioritiesParams {
	o.SetUpdateOrganizationBrandingPoliciesPriorities(updateOrganizationBrandingPoliciesPriorities)
	return o
}

// SetUpdateOrganizationBrandingPoliciesPriorities adds the updateOrganizationBrandingPoliciesPriorities to the update organization branding policies priorities params
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) SetUpdateOrganizationBrandingPoliciesPriorities(updateOrganizationBrandingPoliciesPriorities *models.UpdateOrganizationBrandingPoliciesPriorities) {
	o.UpdateOrganizationBrandingPoliciesPriorities = updateOrganizationBrandingPoliciesPriorities
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateOrganizationBrandingPoliciesPrioritiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.UpdateOrganizationBrandingPoliciesPriorities != nil {
		if err := r.SetBodyParam(o.UpdateOrganizationBrandingPoliciesPriorities); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
