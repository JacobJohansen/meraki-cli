// Code generated by go-swagger; DO NOT EDIT.

package dashboard_branding_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cisco-sso/meraki-cli/models"
)

// NewUpdateOrganizationBrandingPolicyParams creates a new UpdateOrganizationBrandingPolicyParams object
// with the default values initialized.
func NewUpdateOrganizationBrandingPolicyParams() *UpdateOrganizationBrandingPolicyParams {
	var ()
	return &UpdateOrganizationBrandingPolicyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateOrganizationBrandingPolicyParamsWithTimeout creates a new UpdateOrganizationBrandingPolicyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateOrganizationBrandingPolicyParamsWithTimeout(timeout time.Duration) *UpdateOrganizationBrandingPolicyParams {
	var ()
	return &UpdateOrganizationBrandingPolicyParams{

		timeout: timeout,
	}
}

// NewUpdateOrganizationBrandingPolicyParamsWithContext creates a new UpdateOrganizationBrandingPolicyParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateOrganizationBrandingPolicyParamsWithContext(ctx context.Context) *UpdateOrganizationBrandingPolicyParams {
	var ()
	return &UpdateOrganizationBrandingPolicyParams{

		Context: ctx,
	}
}

// NewUpdateOrganizationBrandingPolicyParamsWithHTTPClient creates a new UpdateOrganizationBrandingPolicyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateOrganizationBrandingPolicyParamsWithHTTPClient(client *http.Client) *UpdateOrganizationBrandingPolicyParams {
	var ()
	return &UpdateOrganizationBrandingPolicyParams{
		HTTPClient: client,
	}
}

/*UpdateOrganizationBrandingPolicyParams contains all the parameters to send to the API endpoint
for the update organization branding policy operation typically these are written to a http.Request
*/
type UpdateOrganizationBrandingPolicyParams struct {

	/*BrandingPolicyID*/
	BrandingPolicyID string
	/*OrganizationID*/
	OrganizationID string
	/*UpdateOrganizationBrandingPolicy*/
	UpdateOrganizationBrandingPolicy *models.UpdateOrganizationBrandingPolicy

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) WithTimeout(timeout time.Duration) *UpdateOrganizationBrandingPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) WithContext(ctx context.Context) *UpdateOrganizationBrandingPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) WithHTTPClient(client *http.Client) *UpdateOrganizationBrandingPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBrandingPolicyID adds the brandingPolicyID to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) WithBrandingPolicyID(brandingPolicyID string) *UpdateOrganizationBrandingPolicyParams {
	o.SetBrandingPolicyID(brandingPolicyID)
	return o
}

// SetBrandingPolicyID adds the brandingPolicyId to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) SetBrandingPolicyID(brandingPolicyID string) {
	o.BrandingPolicyID = brandingPolicyID
}

// WithOrganizationID adds the organizationID to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) WithOrganizationID(organizationID string) *UpdateOrganizationBrandingPolicyParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithUpdateOrganizationBrandingPolicy adds the updateOrganizationBrandingPolicy to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) WithUpdateOrganizationBrandingPolicy(updateOrganizationBrandingPolicy *models.UpdateOrganizationBrandingPolicy) *UpdateOrganizationBrandingPolicyParams {
	o.SetUpdateOrganizationBrandingPolicy(updateOrganizationBrandingPolicy)
	return o
}

// SetUpdateOrganizationBrandingPolicy adds the updateOrganizationBrandingPolicy to the update organization branding policy params
func (o *UpdateOrganizationBrandingPolicyParams) SetUpdateOrganizationBrandingPolicy(updateOrganizationBrandingPolicy *models.UpdateOrganizationBrandingPolicy) {
	o.UpdateOrganizationBrandingPolicy = updateOrganizationBrandingPolicy
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateOrganizationBrandingPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param brandingPolicyId
	if err := r.SetPathParam("brandingPolicyId", o.BrandingPolicyID); err != nil {
		return err
	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.UpdateOrganizationBrandingPolicy != nil {
		if err := r.SetBodyParam(o.UpdateOrganizationBrandingPolicy); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
