// Code generated by go-swagger; DO NOT EDIT.

package dashboard_branding_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dashboard branding policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dashboard branding policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOrganizationBrandingPolicy(params *CreateOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationBrandingPolicyCreated, error)

	DeleteOrganizationBrandingPolicy(params *DeleteOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationBrandingPolicyNoContent, error)

	GetOrganizationBrandingPolicies(params *GetOrganizationBrandingPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationBrandingPoliciesOK, error)

	GetOrganizationBrandingPoliciesPriorities(params *GetOrganizationBrandingPoliciesPrioritiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationBrandingPoliciesPrioritiesOK, error)

	GetOrganizationBrandingPolicy(params *GetOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationBrandingPolicyOK, error)

	UpdateOrganizationBrandingPoliciesPriorities(params *UpdateOrganizationBrandingPoliciesPrioritiesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationBrandingPoliciesPrioritiesOK, error)

	UpdateOrganizationBrandingPolicy(params *UpdateOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationBrandingPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateOrganizationBrandingPolicy creates organization branding policy

  Add a new branding policy to an organization
*/
func (a *Client) CreateOrganizationBrandingPolicy(params *CreateOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationBrandingPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationBrandingPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganizationBrandingPolicy",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationBrandingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationBrandingPolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationBrandingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationBrandingPolicy deletes organization branding policy

  Delete a branding policy
*/
func (a *Client) DeleteOrganizationBrandingPolicy(params *DeleteOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationBrandingPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationBrandingPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganizationBrandingPolicy",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationBrandingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationBrandingPolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationBrandingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationBrandingPolicies gets organization branding policies

  List the branding policies of an organization
*/
func (a *Client) GetOrganizationBrandingPolicies(params *GetOrganizationBrandingPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationBrandingPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationBrandingPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationBrandingPolicies",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationBrandingPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationBrandingPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationBrandingPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationBrandingPoliciesPriorities gets organization branding policies priorities

  Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
*/
func (a *Client) GetOrganizationBrandingPoliciesPriorities(params *GetOrganizationBrandingPoliciesPrioritiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationBrandingPoliciesPrioritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationBrandingPoliciesPrioritiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationBrandingPoliciesPriorities",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationBrandingPoliciesPrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationBrandingPoliciesPrioritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationBrandingPoliciesPriorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationBrandingPolicy gets organization branding policy

  Return a branding policy
*/
func (a *Client) GetOrganizationBrandingPolicy(params *GetOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationBrandingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationBrandingPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationBrandingPolicy",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationBrandingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationBrandingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationBrandingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationBrandingPoliciesPriorities updates organization branding policies priorities

  Update the priority ordering of an organization's branding policies.
*/
func (a *Client) UpdateOrganizationBrandingPoliciesPriorities(params *UpdateOrganizationBrandingPoliciesPrioritiesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationBrandingPoliciesPrioritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationBrandingPoliciesPrioritiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganizationBrandingPoliciesPriorities",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationBrandingPoliciesPrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationBrandingPoliciesPrioritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationBrandingPoliciesPriorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationBrandingPolicy updates organization branding policy

  Update a branding policy
*/
func (a *Client) UpdateOrganizationBrandingPolicy(params *UpdateOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationBrandingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationBrandingPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganizationBrandingPolicy",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationBrandingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationBrandingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationBrandingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
