// Code generated by go-swagger; DO NOT EDIT.

package floorplans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new floorplans API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for floorplans API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkFloorPlan(params *CreateNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkFloorPlanCreated, error)

	DeleteNetworkFloorPlan(params *DeleteNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkFloorPlanNoContent, error)

	GetNetworkFloorPlan(params *GetNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkFloorPlanOK, error)

	GetNetworkFloorPlans(params *GetNetworkFloorPlansParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkFloorPlansOK, error)

	UpdateNetworkFloorPlan(params *UpdateNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkFloorPlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkFloorPlan creates network floor plan

  Upload a floor plan
*/
func (a *Client) CreateNetworkFloorPlan(params *CreateNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkFloorPlanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkFloorPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkFloorPlan",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/floorPlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkFloorPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkFloorPlanCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkFloorPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkFloorPlan deletes network floor plan

  Destroy a floor plan
*/
func (a *Client) DeleteNetworkFloorPlan(params *DeleteNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkFloorPlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkFloorPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkFloorPlan",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/floorPlans/{floorPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkFloorPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkFloorPlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkFloorPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkFloorPlan gets network floor plan

  Find a floor plan by ID
*/
func (a *Client) GetNetworkFloorPlan(params *GetNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkFloorPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkFloorPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkFloorPlan",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/floorPlans/{floorPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkFloorPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkFloorPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkFloorPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkFloorPlans gets network floor plans

  List the floor plans that belong to your network
*/
func (a *Client) GetNetworkFloorPlans(params *GetNetworkFloorPlansParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkFloorPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkFloorPlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkFloorPlans",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/floorPlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkFloorPlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkFloorPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkFloorPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkFloorPlan updates network floor plan

  Update a floor plan's geolocation and other meta data
*/
func (a *Client) UpdateNetworkFloorPlan(params *UpdateNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkFloorPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkFloorPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkFloorPlan",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/floorPlans/{floorPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkFloorPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkFloorPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkFloorPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
