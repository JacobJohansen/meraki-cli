// Code generated by go-swagger; DO NOT EDIT.

package bluetooth_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bluetooth settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bluetooth settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDeviceWirelessBluetoothSettings(params *GetDeviceWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceWirelessBluetoothSettingsOK, error)

	GetNetworkBluetoothSettings(params *GetNetworkBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkBluetoothSettingsOK, error)

	UpdateDeviceWirelessBluetoothSettings(params *UpdateDeviceWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceWirelessBluetoothSettingsOK, error)

	UpdateNetworkBluetoothSettings(params *UpdateNetworkBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkBluetoothSettingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDeviceWirelessBluetoothSettings gets device wireless bluetooth settings

  Return the bluetooth settings for a wireless device
*/
func (a *Client) GetDeviceWirelessBluetoothSettings(params *GetDeviceWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceWirelessBluetoothSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceWirelessBluetoothSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceWirelessBluetoothSettings",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/wireless/bluetooth/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceWirelessBluetoothSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceWirelessBluetoothSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceWirelessBluetoothSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkBluetoothSettings gets network bluetooth settings

  Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network.
*/
func (a *Client) GetNetworkBluetoothSettings(params *GetNetworkBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkBluetoothSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkBluetoothSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkBluetoothSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/bluetoothSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkBluetoothSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkBluetoothSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkBluetoothSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceWirelessBluetoothSettings updates device wireless bluetooth settings

  Update the bluetooth settings for a wireless device
*/
func (a *Client) UpdateDeviceWirelessBluetoothSettings(params *UpdateDeviceWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceWirelessBluetoothSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceWirelessBluetoothSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceWirelessBluetoothSettings",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/wireless/bluetooth/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceWirelessBluetoothSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceWirelessBluetoothSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceWirelessBluetoothSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkBluetoothSettings updates network bluetooth settings

  Update the Bluetooth settings for a network. See the docs page for <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a>.
*/
func (a *Client) UpdateNetworkBluetoothSettings(params *UpdateNetworkBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkBluetoothSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkBluetoothSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkBluetoothSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/bluetoothSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkBluetoothSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkBluetoothSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkBluetoothSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
