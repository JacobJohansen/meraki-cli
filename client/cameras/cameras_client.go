// Code generated by go-swagger; DO NOT EDIT.

package cameras

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cameras API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cameras API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GenerateNetworkCameraSnapshot(params *GenerateNetworkCameraSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateNetworkCameraSnapshotAccepted, error)

	GetDeviceCameraQualityAndRetentionSettings(params *GetDeviceCameraQualityAndRetentionSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceCameraQualityAndRetentionSettingsOK, error)

	GetNetworkCameraSchedules(params *GetNetworkCameraSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkCameraSchedulesOK, error)

	GetNetworkCameraVideoLink(params *GetNetworkCameraVideoLinkParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkCameraVideoLinkOK, error)

	UpdateDeviceCameraQualityAndRetentionSettings(params *UpdateDeviceCameraQualityAndRetentionSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceCameraQualityAndRetentionSettingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GenerateNetworkCameraSnapshot generates network camera snapshot

  Generate a snapshot of what the camera sees at the specified time and return a link to that image.
*/
func (a *Client) GenerateNetworkCameraSnapshot(params *GenerateNetworkCameraSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateNetworkCameraSnapshotAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateNetworkCameraSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generateNetworkCameraSnapshot",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/cameras/{serial}/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateNetworkCameraSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateNetworkCameraSnapshotAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateNetworkCameraSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraQualityAndRetentionSettings gets device camera quality and retention settings

  Returns quality and retention settings for the given camera
*/
func (a *Client) GetDeviceCameraQualityAndRetentionSettings(params *GetDeviceCameraQualityAndRetentionSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceCameraQualityAndRetentionSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraQualityAndRetentionSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceCameraQualityAndRetentionSettings",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/qualityAndRetentionSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraQualityAndRetentionSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraQualityAndRetentionSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraQualityAndRetentionSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCameraSchedules gets network camera schedules

  Returns a list of all camera recording schedules.
*/
func (a *Client) GetNetworkCameraSchedules(params *GetNetworkCameraSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkCameraSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCameraSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkCameraSchedules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/camera/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCameraSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCameraSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCameraSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCameraVideoLink gets network camera video link

  Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
*/
func (a *Client) GetNetworkCameraVideoLink(params *GetNetworkCameraVideoLinkParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkCameraVideoLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCameraVideoLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkCameraVideoLink",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/cameras/{serial}/videoLink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCameraVideoLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCameraVideoLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCameraVideoLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceCameraQualityAndRetentionSettings updates device camera quality and retention settings

  Update quality and retention settings for the given camera
*/
func (a *Client) UpdateDeviceCameraQualityAndRetentionSettings(params *UpdateDeviceCameraQualityAndRetentionSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceCameraQualityAndRetentionSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceCameraQualityAndRetentionSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceCameraQualityAndRetentionSettings",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/camera/qualityAndRetentionSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceCameraQualityAndRetentionSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceCameraQualityAndRetentionSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceCameraQualityAndRetentionSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
