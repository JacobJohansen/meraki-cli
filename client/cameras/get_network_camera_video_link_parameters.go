// Code generated by go-swagger; DO NOT EDIT.

package cameras

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetNetworkCameraVideoLinkParams creates a new GetNetworkCameraVideoLinkParams object
// with the default values initialized.
func NewGetNetworkCameraVideoLinkParams() *GetNetworkCameraVideoLinkParams {
	var ()
	return &GetNetworkCameraVideoLinkParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkCameraVideoLinkParamsWithTimeout creates a new GetNetworkCameraVideoLinkParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworkCameraVideoLinkParamsWithTimeout(timeout time.Duration) *GetNetworkCameraVideoLinkParams {
	var ()
	return &GetNetworkCameraVideoLinkParams{

		timeout: timeout,
	}
}

// NewGetNetworkCameraVideoLinkParamsWithContext creates a new GetNetworkCameraVideoLinkParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworkCameraVideoLinkParamsWithContext(ctx context.Context) *GetNetworkCameraVideoLinkParams {
	var ()
	return &GetNetworkCameraVideoLinkParams{

		Context: ctx,
	}
}

// NewGetNetworkCameraVideoLinkParamsWithHTTPClient creates a new GetNetworkCameraVideoLinkParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworkCameraVideoLinkParamsWithHTTPClient(client *http.Client) *GetNetworkCameraVideoLinkParams {
	var ()
	return &GetNetworkCameraVideoLinkParams{
		HTTPClient: client,
	}
}

/*GetNetworkCameraVideoLinkParams contains all the parameters to send to the API endpoint
for the get network camera video link operation typically these are written to a http.Request
*/
type GetNetworkCameraVideoLinkParams struct {

	/*NetworkID*/
	NetworkID string
	/*Serial*/
	Serial string
	/*Timestamp
	  [optional] The video link will start at this timestamp. The timestamp is in UNIX Epoch time (milliseconds). If no timestamp is specified, we will assume current time.

	*/
	Timestamp *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) WithTimeout(timeout time.Duration) *GetNetworkCameraVideoLinkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) WithContext(ctx context.Context) *GetNetworkCameraVideoLinkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) WithHTTPClient(client *http.Client) *GetNetworkCameraVideoLinkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetworkID adds the networkID to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) WithNetworkID(networkID string) *GetNetworkCameraVideoLinkParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithSerial adds the serial to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) WithSerial(serial string) *GetNetworkCameraVideoLinkParams {
	o.SetSerial(serial)
	return o
}

// SetSerial adds the serial to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) SetSerial(serial string) {
	o.Serial = serial
}

// WithTimestamp adds the timestamp to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) WithTimestamp(timestamp *string) *GetNetworkCameraVideoLinkParams {
	o.SetTimestamp(timestamp)
	return o
}

// SetTimestamp adds the timestamp to the get network camera video link params
func (o *GetNetworkCameraVideoLinkParams) SetTimestamp(timestamp *string) {
	o.Timestamp = timestamp
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkCameraVideoLinkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	// path param serial
	if err := r.SetPathParam("serial", o.Serial); err != nil {
		return err
	}

	if o.Timestamp != nil {

		// query param timestamp
		var qrTimestamp string
		if o.Timestamp != nil {
			qrTimestamp = *o.Timestamp
		}
		qTimestamp := qrTimestamp
		if qTimestamp != "" {
			if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
