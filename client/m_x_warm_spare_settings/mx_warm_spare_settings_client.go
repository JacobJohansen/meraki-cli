// Code generated by go-swagger; DO NOT EDIT.

package m_x_warm_spare_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new m x warm spare settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for m x warm spare settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetNetworkWarmSpareSettings(params *GetNetworkWarmSpareSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkWarmSpareSettingsOK, error)

	SwapNetworkWarmspare(params *SwapNetworkWarmspareParams, authInfo runtime.ClientAuthInfoWriter) (*SwapNetworkWarmspareOK, error)

	UpdateNetworkWarmSpareSettings(params *UpdateNetworkWarmSpareSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkWarmSpareSettingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetNetworkWarmSpareSettings gets network warm spare settings

  Return MX warm spare settings
*/
func (a *Client) GetNetworkWarmSpareSettings(params *GetNetworkWarmSpareSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkWarmSpareSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWarmSpareSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkWarmSpareSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/warmSpareSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWarmSpareSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWarmSpareSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWarmSpareSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SwapNetworkWarmspare swaps network warmspare

  Swap MX primary and warm spare appliances
*/
func (a *Client) SwapNetworkWarmspare(params *SwapNetworkWarmspareParams, authInfo runtime.ClientAuthInfoWriter) (*SwapNetworkWarmspareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwapNetworkWarmspareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "swapNetworkWarmspare",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/swapWarmSpare",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SwapNetworkWarmspareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SwapNetworkWarmspareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for swapNetworkWarmspare: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWarmSpareSettings updates network warm spare settings

  Update MX warm spare settings
*/
func (a *Client) UpdateNetworkWarmSpareSettings(params *UpdateNetworkWarmSpareSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkWarmSpareSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWarmSpareSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkWarmSpareSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/warmSpareSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWarmSpareSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWarmSpareSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWarmSpareSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
