// Code generated by go-swagger; DO NOT EDIT.

package radio_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new radio settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for radio settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkWirelessRfProfile(params *CreateNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkWirelessRfProfileCreated, error)

	DeleteNetworkWirelessRfProfile(params *DeleteNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkWirelessRfProfileNoContent, error)

	GetNetworkDeviceWirelessRadioSettings(params *GetNetworkDeviceWirelessRadioSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDeviceWirelessRadioSettingsOK, error)

	GetNetworkWirelessRfProfile(params *GetNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkWirelessRfProfileOK, error)

	GetNetworkWirelessRfProfiles(params *GetNetworkWirelessRfProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkWirelessRfProfilesOK, error)

	UpdateNetworkDeviceWirelessRadioSettings(params *UpdateNetworkDeviceWirelessRadioSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkDeviceWirelessRadioSettingsOK, error)

	UpdateNetworkWirelessRfProfile(params *UpdateNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkWirelessRfProfileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkWirelessRfProfile creates network wireless rf profile

  Creates new RF profile for this network
*/
func (a *Client) CreateNetworkWirelessRfProfile(params *CreateNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkWirelessRfProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkWirelessRfProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkWirelessRfProfile",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkWirelessRfProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkWirelessRfProfileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkWirelessRfProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkWirelessRfProfile deletes network wireless rf profile

  Delete a RF Profile
*/
func (a *Client) DeleteNetworkWirelessRfProfile(params *DeleteNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkWirelessRfProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkWirelessRfProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkWirelessRfProfile",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkWirelessRfProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkWirelessRfProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkWirelessRfProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkDeviceWirelessRadioSettings gets network device wireless radio settings

  Return the radio settings of a device
*/
func (a *Client) GetNetworkDeviceWirelessRadioSettings(params *GetNetworkDeviceWirelessRadioSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDeviceWirelessRadioSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDeviceWirelessRadioSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDeviceWirelessRadioSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/devices/{serial}/wireless/radioSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDeviceWirelessRadioSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkDeviceWirelessRadioSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkDeviceWirelessRadioSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessRfProfile gets network wireless rf profile

  Return a RF profile
*/
func (a *Client) GetNetworkWirelessRfProfile(params *GetNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkWirelessRfProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessRfProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkWirelessRfProfile",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessRfProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessRfProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessRfProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessRfProfiles gets network wireless rf profiles

  List the non-basic RF profiles for this network
*/
func (a *Client) GetNetworkWirelessRfProfiles(params *GetNetworkWirelessRfProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkWirelessRfProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessRfProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkWirelessRfProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessRfProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessRfProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessRfProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkDeviceWirelessRadioSettings updates network device wireless radio settings

  Update the radio settings of a device
*/
func (a *Client) UpdateNetworkDeviceWirelessRadioSettings(params *UpdateNetworkDeviceWirelessRadioSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkDeviceWirelessRadioSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkDeviceWirelessRadioSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkDeviceWirelessRadioSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/devices/{serial}/wireless/radioSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkDeviceWirelessRadioSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkDeviceWirelessRadioSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkDeviceWirelessRadioSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessRfProfile updates network wireless rf profile

  Updates specified RF profile for this network
*/
func (a *Client) UpdateNetworkWirelessRfProfile(params *UpdateNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkWirelessRfProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessRfProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkWirelessRfProfile",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessRfProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessRfProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessRfProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
