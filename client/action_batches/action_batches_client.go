// Code generated by go-swagger; DO NOT EDIT.

package action_batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new action batches API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for action batches API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOrganizationActionBatch(params *CreateOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationActionBatchCreated, error)

	DeleteOrganizationActionBatch(params *DeleteOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationActionBatchNoContent, error)

	GetOrganizationActionBatch(params *GetOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationActionBatchOK, error)

	GetOrganizationActionBatches(params *GetOrganizationActionBatchesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationActionBatchesOK, error)

	UpdateOrganizationActionBatch(params *UpdateOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationActionBatchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateOrganizationActionBatch creates organization action batch

  Create an action batch
*/
func (a *Client) CreateOrganizationActionBatch(params *CreateOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationActionBatchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationActionBatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganizationActionBatch",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/actionBatches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationActionBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationActionBatchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationActionBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationActionBatch deletes organization action batch

  Delete an action batch
*/
func (a *Client) DeleteOrganizationActionBatch(params *DeleteOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationActionBatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationActionBatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganizationActionBatch",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/actionBatches/{actionBatchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationActionBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationActionBatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationActionBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationActionBatch gets organization action batch

  Return an action batch
*/
func (a *Client) GetOrganizationActionBatch(params *GetOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationActionBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationActionBatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationActionBatch",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/actionBatches/{actionBatchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationActionBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationActionBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationActionBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationActionBatches gets organization action batches

  Return the list of action batches in the organization
*/
func (a *Client) GetOrganizationActionBatches(params *GetOrganizationActionBatchesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationActionBatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationActionBatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationActionBatches",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/actionBatches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationActionBatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationActionBatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationActionBatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationActionBatch updates organization action batch

  Update an action batch
*/
func (a *Client) UpdateOrganizationActionBatch(params *UpdateOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationActionBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationActionBatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganizationActionBatch",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/actionBatches/{actionBatchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationActionBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationActionBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationActionBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
