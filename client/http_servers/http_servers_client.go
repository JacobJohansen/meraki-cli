// Code generated by go-swagger; DO NOT EDIT.

package http_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new http servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for http servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkHTTPServer(params *CreateNetworkHTTPServerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkHTTPServerCreated, error)

	CreateNetworkHTTPServersWebhookTest(params *CreateNetworkHTTPServersWebhookTestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkHTTPServersWebhookTestOK, error)

	DeleteNetworkHTTPServer(params *DeleteNetworkHTTPServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkHTTPServerNoContent, error)

	GetNetworkHTTPServer(params *GetNetworkHTTPServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkHTTPServerOK, error)

	GetNetworkHTTPServers(params *GetNetworkHTTPServersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkHTTPServersOK, error)

	GetNetworkHTTPServersWebhookTest(params *GetNetworkHTTPServersWebhookTestParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkHTTPServersWebhookTestOK, error)

	UpdateNetworkHTTPServer(params *UpdateNetworkHTTPServerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkHTTPServerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkHTTPServer creates network Http server

  Add an HTTP server to a network
*/
func (a *Client) CreateNetworkHTTPServer(params *CreateNetworkHTTPServerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkHTTPServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkHTTPServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkHttpServer",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/httpServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkHTTPServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkHTTPServerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkHttpServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkHTTPServersWebhookTest creates network Http servers webhook test

  Send a test webhook for a network
*/
func (a *Client) CreateNetworkHTTPServersWebhookTest(params *CreateNetworkHTTPServersWebhookTestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkHTTPServersWebhookTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkHTTPServersWebhookTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkHttpServersWebhookTest",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/httpServers/webhookTests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkHTTPServersWebhookTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkHTTPServersWebhookTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkHttpServersWebhookTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkHTTPServer deletes network Http server

  Delete an HTTP server from a network
*/
func (a *Client) DeleteNetworkHTTPServer(params *DeleteNetworkHTTPServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkHTTPServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkHTTPServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkHttpServer",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/httpServers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkHTTPServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkHTTPServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkHttpServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkHTTPServer gets network Http server

  Return an HTTP server for a network
*/
func (a *Client) GetNetworkHTTPServer(params *GetNetworkHTTPServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkHTTPServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkHTTPServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkHttpServer",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/httpServers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkHTTPServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkHTTPServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkHttpServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkHTTPServers gets network Http servers

  List the HTTP servers for a network
*/
func (a *Client) GetNetworkHTTPServers(params *GetNetworkHTTPServersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkHTTPServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkHTTPServersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkHttpServers",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/httpServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkHTTPServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkHTTPServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkHttpServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkHTTPServersWebhookTest gets network Http servers webhook test

  Return the status of a webhook test for a network
*/
func (a *Client) GetNetworkHTTPServersWebhookTest(params *GetNetworkHTTPServersWebhookTestParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkHTTPServersWebhookTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkHTTPServersWebhookTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkHttpServersWebhookTest",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/httpServers/webhookTests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkHTTPServersWebhookTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkHTTPServersWebhookTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkHttpServersWebhookTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkHTTPServer updates network Http server

  Update an HTTP server
*/
func (a *Client) UpdateNetworkHTTPServer(params *UpdateNetworkHTTPServerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkHTTPServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkHTTPServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkHttpServer",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/httpServers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkHTTPServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkHTTPServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkHttpServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
