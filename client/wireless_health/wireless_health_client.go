// Code generated by go-swagger; DO NOT EDIT.

package wireless_health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wireless health API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wireless health API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetNetworkClientConnectionStats(params *GetNetworkClientConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientConnectionStatsOK, error)

	GetNetworkClientLatencyStats(params *GetNetworkClientLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientLatencyStatsOK, error)

	GetNetworkClientsConnectionStats(params *GetNetworkClientsConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientsConnectionStatsOK, error)

	GetNetworkClientsLatencyStats(params *GetNetworkClientsLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientsLatencyStatsOK, error)

	GetNetworkConnectionStats(params *GetNetworkConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkConnectionStatsOK, error)

	GetNetworkDeviceConnectionStats(params *GetNetworkDeviceConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDeviceConnectionStatsOK, error)

	GetNetworkDeviceLatencyStats(params *GetNetworkDeviceLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDeviceLatencyStatsOK, error)

	GetNetworkDevicesConnectionStats(params *GetNetworkDevicesConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDevicesConnectionStatsOK, error)

	GetNetworkDevicesLatencyStats(params *GetNetworkDevicesLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDevicesLatencyStatsOK, error)

	GetNetworkFailedConnections(params *GetNetworkFailedConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkFailedConnectionsOK, error)

	GetNetworkLatencyStats(params *GetNetworkLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkLatencyStatsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetNetworkClientConnectionStats gets network client connection stats

  Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
*/
func (a *Client) GetNetworkClientConnectionStats(params *GetNetworkClientConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientConnectionStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientConnectionStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientLatencyStats gets network client latency stats

  Aggregated latency info for a given client on this network. Clients are identified by their MAC.
*/
func (a *Client) GetNetworkClientLatencyStats(params *GetNetworkClientLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientLatencyStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientLatencyStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientsConnectionStats gets network clients connection stats

  Aggregated connectivity info for this network, grouped by clients
*/
func (a *Client) GetNetworkClientsConnectionStats(params *GetNetworkClientsConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientsConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientsConnectionStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientsConnectionStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientsConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientsConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientsConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientsLatencyStats gets network clients latency stats

  Aggregated latency info for this network, grouped by clients
*/
func (a *Client) GetNetworkClientsLatencyStats(params *GetNetworkClientsLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkClientsLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientsLatencyStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkClientsLatencyStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientsLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientsLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientsLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkConnectionStats gets network connection stats

  Aggregated connectivity info for this network
*/
func (a *Client) GetNetworkConnectionStats(params *GetNetworkConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkConnectionStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkConnectionStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkDeviceConnectionStats gets network device connection stats

  Aggregated connectivity info for a given AP on this network
*/
func (a *Client) GetNetworkDeviceConnectionStats(params *GetNetworkDeviceConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDeviceConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDeviceConnectionStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDeviceConnectionStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/devices/{serial}/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDeviceConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkDeviceConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkDeviceConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkDeviceLatencyStats gets network device latency stats

  Aggregated latency info for a given AP on this network
*/
func (a *Client) GetNetworkDeviceLatencyStats(params *GetNetworkDeviceLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDeviceLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDeviceLatencyStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDeviceLatencyStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/devices/{serial}/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDeviceLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkDeviceLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkDeviceLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkDevicesConnectionStats gets network devices connection stats

  Aggregated connectivity info for this network, grouped by node
*/
func (a *Client) GetNetworkDevicesConnectionStats(params *GetNetworkDevicesConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDevicesConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDevicesConnectionStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDevicesConnectionStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/devices/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDevicesConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkDevicesConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkDevicesConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkDevicesLatencyStats gets network devices latency stats

  Aggregated latency info for this network, grouped by node
*/
func (a *Client) GetNetworkDevicesLatencyStats(params *GetNetworkDevicesLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDevicesLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDevicesLatencyStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDevicesLatencyStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/devices/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDevicesLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkDevicesLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkDevicesLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkFailedConnections gets network failed connections

  List of all failed client connection events on this network in a given time range
*/
func (a *Client) GetNetworkFailedConnections(params *GetNetworkFailedConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkFailedConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkFailedConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkFailedConnections",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/failedConnections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkFailedConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkFailedConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkFailedConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkLatencyStats gets network latency stats

  Aggregated latency info for this network
*/
func (a *Client) GetNetworkLatencyStats(params *GetNetworkLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkLatencyStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkLatencyStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
