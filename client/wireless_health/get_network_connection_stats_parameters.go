// Code generated by go-swagger; DO NOT EDIT.

package wireless_health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkConnectionStatsParams creates a new GetNetworkConnectionStatsParams object
// with the default values initialized.
func NewGetNetworkConnectionStatsParams() *GetNetworkConnectionStatsParams {
	var ()
	return &GetNetworkConnectionStatsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkConnectionStatsParamsWithTimeout creates a new GetNetworkConnectionStatsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworkConnectionStatsParamsWithTimeout(timeout time.Duration) *GetNetworkConnectionStatsParams {
	var ()
	return &GetNetworkConnectionStatsParams{

		timeout: timeout,
	}
}

// NewGetNetworkConnectionStatsParamsWithContext creates a new GetNetworkConnectionStatsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworkConnectionStatsParamsWithContext(ctx context.Context) *GetNetworkConnectionStatsParams {
	var ()
	return &GetNetworkConnectionStatsParams{

		Context: ctx,
	}
}

// NewGetNetworkConnectionStatsParamsWithHTTPClient creates a new GetNetworkConnectionStatsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworkConnectionStatsParamsWithHTTPClient(client *http.Client) *GetNetworkConnectionStatsParams {
	var ()
	return &GetNetworkConnectionStatsParams{
		HTTPClient: client,
	}
}

/*GetNetworkConnectionStatsParams contains all the parameters to send to the API endpoint
for the get network connection stats operation typically these are written to a http.Request
*/
type GetNetworkConnectionStatsParams struct {

	/*ApTag
	  Filter results by AP Tag

	*/
	ApTag *string
	/*NetworkID*/
	NetworkID string
	/*Ssid
	  Filter results by SSID

	*/
	Ssid *int32
	/*T0
	  The beginning of the timespan for the data. The maximum lookback period is 180 days from today.

	*/
	T0 *string
	/*T1
	  The end of the timespan for the data. t1 can be a maximum of 7 days after t0.

	*/
	T1 *string
	/*Timespan
	  The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.

	*/
	Timespan *float64
	/*Vlan
	  Filter results by VLAN

	*/
	Vlan *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithTimeout(timeout time.Duration) *GetNetworkConnectionStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithContext(ctx context.Context) *GetNetworkConnectionStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithHTTPClient(client *http.Client) *GetNetworkConnectionStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApTag adds the apTag to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithApTag(apTag *string) *GetNetworkConnectionStatsParams {
	o.SetApTag(apTag)
	return o
}

// SetApTag adds the apTag to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetApTag(apTag *string) {
	o.ApTag = apTag
}

// WithNetworkID adds the networkID to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithNetworkID(networkID string) *GetNetworkConnectionStatsParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithSsid adds the ssid to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithSsid(ssid *int32) *GetNetworkConnectionStatsParams {
	o.SetSsid(ssid)
	return o
}

// SetSsid adds the ssid to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetSsid(ssid *int32) {
	o.Ssid = ssid
}

// WithT0 adds the t0 to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithT0(t0 *string) *GetNetworkConnectionStatsParams {
	o.SetT0(t0)
	return o
}

// SetT0 adds the t0 to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetT0(t0 *string) {
	o.T0 = t0
}

// WithT1 adds the t1 to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithT1(t1 *string) *GetNetworkConnectionStatsParams {
	o.SetT1(t1)
	return o
}

// SetT1 adds the t1 to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetT1(t1 *string) {
	o.T1 = t1
}

// WithTimespan adds the timespan to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithTimespan(timespan *float64) *GetNetworkConnectionStatsParams {
	o.SetTimespan(timespan)
	return o
}

// SetTimespan adds the timespan to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetTimespan(timespan *float64) {
	o.Timespan = timespan
}

// WithVlan adds the vlan to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) WithVlan(vlan *int32) *GetNetworkConnectionStatsParams {
	o.SetVlan(vlan)
	return o
}

// SetVlan adds the vlan to the get network connection stats params
func (o *GetNetworkConnectionStatsParams) SetVlan(vlan *int32) {
	o.Vlan = vlan
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkConnectionStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApTag != nil {

		// query param apTag
		var qrApTag string
		if o.ApTag != nil {
			qrApTag = *o.ApTag
		}
		qApTag := qrApTag
		if qApTag != "" {
			if err := r.SetQueryParam("apTag", qApTag); err != nil {
				return err
			}
		}

	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.Ssid != nil {

		// query param ssid
		var qrSsid int32
		if o.Ssid != nil {
			qrSsid = *o.Ssid
		}
		qSsid := swag.FormatInt32(qrSsid)
		if qSsid != "" {
			if err := r.SetQueryParam("ssid", qSsid); err != nil {
				return err
			}
		}

	}

	if o.T0 != nil {

		// query param t0
		var qrT0 string
		if o.T0 != nil {
			qrT0 = *o.T0
		}
		qT0 := qrT0
		if qT0 != "" {
			if err := r.SetQueryParam("t0", qT0); err != nil {
				return err
			}
		}

	}

	if o.T1 != nil {

		// query param t1
		var qrT1 string
		if o.T1 != nil {
			qrT1 = *o.T1
		}
		qT1 := qrT1
		if qT1 != "" {
			if err := r.SetQueryParam("t1", qT1); err != nil {
				return err
			}
		}

	}

	if o.Timespan != nil {

		// query param timespan
		var qrTimespan float64
		if o.Timespan != nil {
			qrTimespan = *o.Timespan
		}
		qTimespan := swag.FormatFloat64(qrTimespan)
		if qTimespan != "" {
			if err := r.SetQueryParam("timespan", qTimespan); err != nil {
				return err
			}
		}

	}

	if o.Vlan != nil {

		// query param vlan
		var qrVlan int32
		if o.Vlan != nil {
			qrVlan = *o.Vlan
		}
		qVlan := swag.FormatInt32(qrVlan)
		if qVlan != "" {
			if err := r.SetQueryParam("vlan", qVlan); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
