// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cisco-sso/meraki-cli/models"
)

// NewUpdateOrganizationLicenseParams creates a new UpdateOrganizationLicenseParams object
// with the default values initialized.
func NewUpdateOrganizationLicenseParams() *UpdateOrganizationLicenseParams {
	var ()
	return &UpdateOrganizationLicenseParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateOrganizationLicenseParamsWithTimeout creates a new UpdateOrganizationLicenseParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateOrganizationLicenseParamsWithTimeout(timeout time.Duration) *UpdateOrganizationLicenseParams {
	var ()
	return &UpdateOrganizationLicenseParams{

		timeout: timeout,
	}
}

// NewUpdateOrganizationLicenseParamsWithContext creates a new UpdateOrganizationLicenseParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateOrganizationLicenseParamsWithContext(ctx context.Context) *UpdateOrganizationLicenseParams {
	var ()
	return &UpdateOrganizationLicenseParams{

		Context: ctx,
	}
}

// NewUpdateOrganizationLicenseParamsWithHTTPClient creates a new UpdateOrganizationLicenseParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateOrganizationLicenseParamsWithHTTPClient(client *http.Client) *UpdateOrganizationLicenseParams {
	var ()
	return &UpdateOrganizationLicenseParams{
		HTTPClient: client,
	}
}

/*UpdateOrganizationLicenseParams contains all the parameters to send to the API endpoint
for the update organization license operation typically these are written to a http.Request
*/
type UpdateOrganizationLicenseParams struct {

	/*LicenseID*/
	LicenseID string
	/*OrganizationID*/
	OrganizationID string
	/*UpdateOrganizationLicense*/
	UpdateOrganizationLicense *models.UpdateOrganizationLicense

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update organization license params
func (o *UpdateOrganizationLicenseParams) WithTimeout(timeout time.Duration) *UpdateOrganizationLicenseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update organization license params
func (o *UpdateOrganizationLicenseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update organization license params
func (o *UpdateOrganizationLicenseParams) WithContext(ctx context.Context) *UpdateOrganizationLicenseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update organization license params
func (o *UpdateOrganizationLicenseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update organization license params
func (o *UpdateOrganizationLicenseParams) WithHTTPClient(client *http.Client) *UpdateOrganizationLicenseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update organization license params
func (o *UpdateOrganizationLicenseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLicenseID adds the licenseID to the update organization license params
func (o *UpdateOrganizationLicenseParams) WithLicenseID(licenseID string) *UpdateOrganizationLicenseParams {
	o.SetLicenseID(licenseID)
	return o
}

// SetLicenseID adds the licenseId to the update organization license params
func (o *UpdateOrganizationLicenseParams) SetLicenseID(licenseID string) {
	o.LicenseID = licenseID
}

// WithOrganizationID adds the organizationID to the update organization license params
func (o *UpdateOrganizationLicenseParams) WithOrganizationID(organizationID string) *UpdateOrganizationLicenseParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the update organization license params
func (o *UpdateOrganizationLicenseParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithUpdateOrganizationLicense adds the updateOrganizationLicense to the update organization license params
func (o *UpdateOrganizationLicenseParams) WithUpdateOrganizationLicense(updateOrganizationLicense *models.UpdateOrganizationLicense) *UpdateOrganizationLicenseParams {
	o.SetUpdateOrganizationLicense(updateOrganizationLicense)
	return o
}

// SetUpdateOrganizationLicense adds the updateOrganizationLicense to the update organization license params
func (o *UpdateOrganizationLicenseParams) SetUpdateOrganizationLicense(updateOrganizationLicense *models.UpdateOrganizationLicense) {
	o.UpdateOrganizationLicense = updateOrganizationLicense
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateOrganizationLicenseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param licenseId
	if err := r.SetPathParam("licenseId", o.LicenseID); err != nil {
		return err
	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.UpdateOrganizationLicense != nil {
		if err := r.SetBodyParam(o.UpdateOrganizationLicense); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
