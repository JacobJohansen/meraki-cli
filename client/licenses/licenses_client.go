// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new licenses API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for licenses API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AssignOrganizationLicensesSeats(params *AssignOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter) (*AssignOrganizationLicensesSeatsOK, error)

	GetOrganizationLicense(params *GetOrganizationLicenseParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationLicenseOK, error)

	GetOrganizationLicenses(params *GetOrganizationLicensesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationLicensesOK, error)

	MoveOrganizationLicenses(params *MoveOrganizationLicensesParams, authInfo runtime.ClientAuthInfoWriter) (*MoveOrganizationLicensesOK, error)

	MoveOrganizationLicensesSeats(params *MoveOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter) (*MoveOrganizationLicensesSeatsOK, error)

	RenewOrganizationLicensesSeats(params *RenewOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter) (*RenewOrganizationLicensesSeatsOK, error)

	UpdateOrganizationLicense(params *UpdateOrganizationLicenseParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationLicenseOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AssignOrganizationLicensesSeats assigns organization licenses seats

  Assign SM seats to a network. This will increase the managed SM device limit of the network
*/
func (a *Client) AssignOrganizationLicensesSeats(params *AssignOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter) (*AssignOrganizationLicensesSeatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignOrganizationLicensesSeatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignOrganizationLicensesSeats",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/licenses/assignSeats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignOrganizationLicensesSeatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignOrganizationLicensesSeatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignOrganizationLicensesSeats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationLicense gets organization license

  Display a license
*/
func (a *Client) GetOrganizationLicense(params *GetOrganizationLicenseParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationLicenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationLicense",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/licenses/{licenseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationLicenses gets organization licenses

  List the licenses for an organization
*/
func (a *Client) GetOrganizationLicenses(params *GetOrganizationLicensesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationLicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationLicensesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationLicenses",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/licenses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationLicensesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationLicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationLicenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveOrganizationLicenses moves organization licenses

  Move licenses to another organization. This will also move any devices that the licenses are assigned to
*/
func (a *Client) MoveOrganizationLicenses(params *MoveOrganizationLicensesParams, authInfo runtime.ClientAuthInfoWriter) (*MoveOrganizationLicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveOrganizationLicensesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "moveOrganizationLicenses",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/licenses/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveOrganizationLicensesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveOrganizationLicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for moveOrganizationLicenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveOrganizationLicensesSeats moves organization licenses seats

  Move SM seats to another organization
*/
func (a *Client) MoveOrganizationLicensesSeats(params *MoveOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter) (*MoveOrganizationLicensesSeatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveOrganizationLicensesSeatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "moveOrganizationLicensesSeats",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/licenses/moveSeats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveOrganizationLicensesSeatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveOrganizationLicensesSeatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for moveOrganizationLicensesSeats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RenewOrganizationLicensesSeats renews organization licenses seats

  Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
*/
func (a *Client) RenewOrganizationLicensesSeats(params *RenewOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter) (*RenewOrganizationLicensesSeatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenewOrganizationLicensesSeatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "renewOrganizationLicensesSeats",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/licenses/renewSeats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RenewOrganizationLicensesSeatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenewOrganizationLicensesSeatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for renewOrganizationLicensesSeats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationLicense updates organization license

  Update a license
*/
func (a *Client) UpdateOrganizationLicense(params *UpdateOrganizationLicenseParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganizationLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationLicenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganizationLicense",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/licenses/{licenseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
