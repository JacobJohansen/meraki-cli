// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rule8 Rule8
//
// swagger:model Rule8
type Rule8 struct {

	// The ports this mapping will provide access on, and the remote IPs that will be allowed access to the resource
	AllowedInbound []*AllowedInbound `json:"allowedInbound"`

	// The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
	// Required: true
	LanIP *string `json:"lanIp"`

	// A descriptive name for the rule
	Name string `json:"name,omitempty"`

	// The IP address that will be used to access the internal resource from the WAN
	PublicIP string `json:"publicIp,omitempty"`

	// uplink
	Uplink Uplink1 `json:"uplink,omitempty"`
}

// Validate validates this rule8
func (m *Rule8) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedInbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUplink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rule8) validateAllowedInbound(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedInbound) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedInbound); i++ {
		if swag.IsZero(m.AllowedInbound[i]) { // not required
			continue
		}

		if m.AllowedInbound[i] != nil {
			if err := m.AllowedInbound[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowedInbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule8) validateLanIP(formats strfmt.Registry) error {

	if err := validate.Required("lanIp", "body", m.LanIP); err != nil {
		return err
	}

	return nil
}

func (m *Rule8) validateUplink(formats strfmt.Registry) error {

	if swag.IsZero(m.Uplink) { // not required
		return nil
	}

	if err := m.Uplink.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uplink")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rule8) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule8) UnmarshalBinary(b []byte) error {
	var res Rule8
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
