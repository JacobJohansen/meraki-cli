// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RadiusFailoverPolicy RadiusFailoverPolicy
//
// This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')
//
// swagger:model RadiusFailoverPolicy
type RadiusFailoverPolicy string

const (

	// RadiusFailoverPolicyDenyAccess captures enum value "Deny access"
	RadiusFailoverPolicyDenyAccess RadiusFailoverPolicy = "Deny access"

	// RadiusFailoverPolicyAllowAccess captures enum value "Allow access"
	RadiusFailoverPolicyAllowAccess RadiusFailoverPolicy = "Allow access"
)

// for schema
var radiusFailoverPolicyEnum []interface{}

func init() {
	var res []RadiusFailoverPolicy
	if err := json.Unmarshal([]byte(`["Deny access","Allow access"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		radiusFailoverPolicyEnum = append(radiusFailoverPolicyEnum, v)
	}
}

func (m RadiusFailoverPolicy) validateRadiusFailoverPolicyEnum(path, location string, value RadiusFailoverPolicy) error {
	if err := validate.Enum(path, location, value, radiusFailoverPolicyEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this radius failover policy
func (m RadiusFailoverPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRadiusFailoverPolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
