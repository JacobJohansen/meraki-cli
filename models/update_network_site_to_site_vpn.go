// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkSiteToSiteVpn updateNetworkSiteToSiteVpn
//
// swagger:model updateNetworkSiteToSiteVpn
type UpdateNetworkSiteToSiteVpn struct {

	// The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required.
	Hubs []*Hub `json:"hubs"`

	// mode
	// Required: true
	Mode Mode2 `json:"mode"`

	// The list of subnets and their VPN presence.
	Subnets []*Subnet `json:"subnets"`
}

// Validate validates this update network site to site vpn
func (m *UpdateNetworkSiteToSiteVpn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHubs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNetworkSiteToSiteVpn) validateHubs(formats strfmt.Registry) error {

	if swag.IsZero(m.Hubs) { // not required
		return nil
	}

	for i := 0; i < len(m.Hubs); i++ {
		if swag.IsZero(m.Hubs[i]) { // not required
			continue
		}

		if m.Hubs[i] != nil {
			if err := m.Hubs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hubs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateNetworkSiteToSiteVpn) validateMode(formats strfmt.Registry) error {

	if err := m.Mode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *UpdateNetworkSiteToSiteVpn) validateSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {
		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {
			if err := m.Subnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNetworkSiteToSiteVpn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNetworkSiteToSiteVpn) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSiteToSiteVpn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
