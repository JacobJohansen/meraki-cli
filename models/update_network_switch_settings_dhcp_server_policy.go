// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkSwitchSettingsDhcpServerPolicy updateNetworkSwitchSettingsDhcpServerPolicy
//
// swagger:model updateNetworkSwitchSettingsDhcpServerPolicy
type UpdateNetworkSwitchSettingsDhcpServerPolicy struct {

	// List the MAC addresses of DHCP servers to permit on the network. Applicable only if defaultPolicy is set to block. An empty array will clear the entries.
	AllowedServers []string `json:"allowedServers"`

	// List the MAC addresses of DHCP servers to block on the network. Applicable only if defaultPolicy is set to allow. An empty array will clear the entries.
	BlockedServers []string `json:"blockedServers"`

	// default policy
	DefaultPolicy DefaultPolicy `json:"defaultPolicy,omitempty"`
}

// Validate validates this update network switch settings dhcp server policy
func (m *UpdateNetworkSwitchSettingsDhcpServerPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNetworkSwitchSettingsDhcpServerPolicy) validateDefaultPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultPolicy) { // not required
		return nil
	}

	if err := m.DefaultPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("defaultPolicy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNetworkSwitchSettingsDhcpServerPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNetworkSwitchSettingsDhcpServerPolicy) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchSettingsDhcpServerPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
