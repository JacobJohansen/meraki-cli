// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Mode3 Mode3
//
// The traffic analysis mode for the network. Can be one of 'disabled' (do not collect traffic types),
//     'basic' (collect generic traffic categories), or 'detailed' (collect destination hostnames).
//
// swagger:model Mode3
type Mode3 string

const (

	// Mode3Disabled captures enum value "disabled"
	Mode3Disabled Mode3 = "disabled"

	// Mode3Basic captures enum value "basic"
	Mode3Basic Mode3 = "basic"

	// Mode3Detailed captures enum value "detailed"
	Mode3Detailed Mode3 = "detailed"
)

// for schema
var mode3Enum []interface{}

func init() {
	var res []Mode3
	if err := json.Unmarshal([]byte(`["disabled","basic","detailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mode3Enum = append(mode3Enum, v)
	}
}

func (m Mode3) validateMode3Enum(path, location string, value Mode3) error {
	if err := validate.Enum(path, location, value, mode3Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this mode3
func (m Mode3) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMode3Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
