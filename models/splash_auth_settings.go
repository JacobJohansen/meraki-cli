// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SplashAuthSettings SplashAuthSettings
//
// Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
//
// swagger:model SplashAuthSettings
type SplashAuthSettings string

const (

	// SplashAuthSettingsNetworkDefault captures enum value "network default"
	SplashAuthSettingsNetworkDefault SplashAuthSettings = "network default"

	// SplashAuthSettingsBypass captures enum value "bypass"
	SplashAuthSettingsBypass SplashAuthSettings = "bypass"
)

// for schema
var splashAuthSettingsEnum []interface{}

func init() {
	var res []SplashAuthSettings
	if err := json.Unmarshal([]byte(`["network default","bypass"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		splashAuthSettingsEnum = append(splashAuthSettingsEnum, v)
	}
}

func (m SplashAuthSettings) validateSplashAuthSettingsEnum(path, location string, value SplashAuthSettings) error {
	if err := validate.Enum(path, location, value, splashAuthSettingsEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this splash auth settings
func (m SplashAuthSettings) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSplashAuthSettingsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
