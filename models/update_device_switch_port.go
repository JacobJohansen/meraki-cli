// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateDeviceSwitchPort updateDeviceSwitchPort
//
// swagger:model updateDeviceSwitchPort
type UpdateDeviceSwitchPort struct {

	// The number of the access policy of the switch port. Only applicable to access ports.
	AccessPolicyNumber int32 `json:"accessPolicyNumber,omitempty"`

	// The VLANs allowed on the switch port. Only applicable to trunk ports.
	AllowedVlans string `json:"allowedVlans,omitempty"`

	// The status of the switch port
	Enabled bool `json:"enabled,omitempty"`

	// The isolation status of the switch port
	IsolationEnabled bool `json:"isolationEnabled,omitempty"`

	// The link speed for the switch port
	LinkNegotiation string `json:"linkNegotiation,omitempty"`

	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. To disable MAC whitelist, set accessPolicyNumber to null.
	MacWhitelist []string `json:"macWhitelist"`

	// The name of the switch port
	Name string `json:"name,omitempty"`

	// The PoE status of the switch port
	PoeEnabled bool `json:"poeEnabled,omitempty"`

	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleID string `json:"portScheduleId,omitempty"`

	// The rapid spanning tree protocol status
	RstpEnabled bool `json:"rstpEnabled,omitempty"`

	// The initial list of MAC addresses for sticky Mac whitelist. To reset Sticky MAC whitelist, set accessPolicyNumber to null.
	StickyMacWhitelist []string `json:"stickyMacWhitelist"`

	// The maximum number of MAC addresses for sticky MAC whitelist.
	StickyMacWhitelistLimit int32 `json:"stickyMacWhitelistLimit,omitempty"`

	// The storm control status of the switch port
	StormControlEnabled bool `json:"stormControlEnabled,omitempty"`

	// stp guard
	StpGuard StpGuard `json:"stpGuard,omitempty"`

	// The tags of the switch port
	Tags string `json:"tags,omitempty"`

	// type
	Type Type `json:"type,omitempty"`

	// udld
	Udld Udld `json:"udld,omitempty"`

	// The VLAN of the switch port. A null value will clear the value set for trunk ports.
	Vlan int32 `json:"vlan,omitempty"`

	// The voice VLAN of the switch port. Only applicable to access ports.
	VoiceVlan int32 `json:"voiceVlan,omitempty"`
}

// Validate validates this update device switch port
func (m *UpdateDeviceSwitchPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStpGuard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdld(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDeviceSwitchPort) validateStpGuard(formats strfmt.Registry) error {

	if swag.IsZero(m.StpGuard) { // not required
		return nil
	}

	if err := m.StpGuard.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stpGuard")
		}
		return err
	}

	return nil
}

func (m *UpdateDeviceSwitchPort) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *UpdateDeviceSwitchPort) validateUdld(formats strfmt.Registry) error {

	if swag.IsZero(m.Udld) { // not required
		return nil
	}

	if err := m.Udld.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("udld")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateDeviceSwitchPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateDeviceSwitchPort) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSwitchPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
