// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkSmAppPolaris createNetworkSmAppPolaris
//
// swagger:model createNetworkSmAppPolaris
type CreateNetworkSmAppPolaris struct {

	// The bundleId of the Polaris app (one of manifestUrl and bundleId must be provided)
	BundleID string `json:"bundleId,omitempty"`

	// The manifest URL of the Polaris app (one of manifestUrl and bundleId must be provided)
	ManifestURL string `json:"manifestUrl,omitempty"`

	// (optional) Whether or not SM should auto-install this app (one of true or false). False by default.
	PreventAutoInstall bool `json:"preventAutoInstall,omitempty"`

	// The scope (one of all, none, automatic, withAny, withAll, withoutAny, or withoutAll) and a set of tags of the devices to be assigned
	// Required: true
	Scope *string `json:"scope"`

	// (optional) Whether or not the app should use VPP by device assignment (one of true or false). False by default.
	UsesVPP bool `json:"usesVPP,omitempty"`
}

// Validate validates this create network sm app polaris
func (m *CreateNetworkSmAppPolaris) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateNetworkSmAppPolaris) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateNetworkSmAppPolaris) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateNetworkSmAppPolaris) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSmAppPolaris
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
