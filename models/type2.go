// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Type2 Type2
//
// Type of the L7 Rule. Must be 'application', 'applicationCategory', 'host', 'port' or 'ipRange'
//
// swagger:model Type2
type Type2 string

const (

	// Type2Application captures enum value "application"
	Type2Application Type2 = "application"

	// Type2ApplicationCategory captures enum value "applicationCategory"
	Type2ApplicationCategory Type2 = "applicationCategory"

	// Type2Host captures enum value "host"
	Type2Host Type2 = "host"

	// Type2Port captures enum value "port"
	Type2Port Type2 = "port"

	// Type2IPRange captures enum value "ipRange"
	Type2IPRange Type2 = "ipRange"
)

// for schema
var type2Enum []interface{}

func init() {
	var res []Type2
	if err := json.Unmarshal([]byte(`["application","applicationCategory","host","port","ipRange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		type2Enum = append(type2Enum, v)
	}
}

func (m Type2) validateType2Enum(path, location string, value Type2) error {
	if err := validate.Enum(path, location, value, type2Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this type2
func (m Type2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
