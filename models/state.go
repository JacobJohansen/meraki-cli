// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// State state
//
// swagger:model state
type State string

const (

	// StateActive captures enum value "active"
	StateActive State = "active"

	// StateExpired captures enum value "expired"
	StateExpired State = "expired"

	// StateExpiring captures enum value "expiring"
	StateExpiring State = "expiring"

	// StateUnused captures enum value "unused"
	StateUnused State = "unused"

	// StateUnusedActive captures enum value "unusedActive"
	StateUnusedActive State = "unusedActive"

	// StateRecentlyQueued captures enum value "recentlyQueued"
	StateRecentlyQueued State = "recentlyQueued"
)

// for schema
var stateEnum []interface{}

func init() {
	var res []State
	if err := json.Unmarshal([]byte(`["active","expired","expiring","unused","unusedActive","recentlyQueued"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stateEnum = append(stateEnum, v)
	}
}

func (m State) validateStateEnum(path, location string, value State) error {
	if err := validate.Enum(path, location, value, stateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this state
func (m State) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
