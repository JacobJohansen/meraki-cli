// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateDeviceCameraQualityAndRetentionSettings updateDeviceCameraQualityAndRetentionSettings
//
// swagger:model updateDeviceCameraQualityAndRetentionSettings
type UpdateDeviceCameraQualityAndRetentionSettings struct {

	// Boolean indicating if audio recording is enabled(true) or disabled(false) on the camera
	AudioRecordingEnabled bool `json:"audioRecordingEnabled,omitempty"`

	// Boolean indicating if motion-based retention is enabled(true) or disabled(false) on the camera
	MotionBasedRetentionEnabled bool `json:"motionBasedRetentionEnabled,omitempty"`

	// The ID of a quality and retention profile to assign to the camera. The profile's settings will override all of the per-camera quality and retention settings. If the value of this parameter is null, any existing profile will be unassigned from the camera.
	ProfileID string `json:"profileId,omitempty"`

	// quality
	Quality Quality `json:"quality,omitempty"`

	// resolution
	Resolution Resolution `json:"resolution,omitempty"`

	// Boolean indicating if restricted bandwidth is enabled(true) or disabled(false) on the camera
	RestrictedBandwidthModeEnabled bool `json:"restrictedBandwidthModeEnabled,omitempty"`
}

// Validate validates this update device camera quality and retention settings
func (m *UpdateDeviceCameraQualityAndRetentionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDeviceCameraQualityAndRetentionSettings) validateQuality(formats strfmt.Registry) error {

	if swag.IsZero(m.Quality) { // not required
		return nil
	}

	if err := m.Quality.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("quality")
		}
		return err
	}

	return nil
}

func (m *UpdateDeviceCameraQualityAndRetentionSettings) validateResolution(formats strfmt.Registry) error {

	if swag.IsZero(m.Resolution) { // not required
		return nil
	}

	if err := m.Resolution.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resolution")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateDeviceCameraQualityAndRetentionSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateDeviceCameraQualityAndRetentionSettings) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceCameraQualityAndRetentionSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
