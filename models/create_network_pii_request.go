// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateNetworkPiiRequest createNetworkPiiRequest
//
// swagger:model createNetworkPiiRequest
type CreateNetworkPiiRequest struct {

	// The datasets related to the provided key that should be deleted. Only applies to "delete" requests. The value "all" will be expanded to all datasets applicable to this type. The datasets by applicable to each type are: mac (usage, events, traffic), email (users, loginAttempts), username (users, loginAttempts), bluetoothMac (client, connectivity), smDeviceId (device), smUserId (user)
	Datasets []string `json:"datasets"`

	// The email of a network user account. Only applies to "delete" requests.
	Email string `json:"email,omitempty"`

	// The MAC of a network client device. Applies to both "restrict processing" and "delete" requests.
	Mac string `json:"mac,omitempty"`

	// The sm_device_id of a Systems Manager device. The only way to "restrict processing" or "delete" a Systems Manager device. Must include "device" in the dataset for a "delete" request to destroy the device.
	SmDeviceID string `json:"smDeviceId,omitempty"`

	// The sm_user_id of a Systems Manager user. The only way to "restrict processing" or "delete" a Systems Manager user. Must include "user" in the dataset for a "delete" request to destroy the user.
	SmUserID string `json:"smUserId,omitempty"`

	// type
	Type Type6 `json:"type,omitempty"`

	// The username of a network log in. Only applies to "delete" requests.
	Username string `json:"username,omitempty"`
}

// Validate validates this create network pii request
func (m *CreateNetworkPiiRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateNetworkPiiRequest) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateNetworkPiiRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateNetworkPiiRequest) UnmarshalBinary(b []byte) error {
	var res CreateNetworkPiiRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
