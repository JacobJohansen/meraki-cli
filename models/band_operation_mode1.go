// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BandOperationMode1 BandOperationMode1
//
// Choice between 'dual', '2.4ghz' or '5ghz'.
//
// swagger:model BandOperationMode1
type BandOperationMode1 string

const (

	// BandOperationMode1Dual captures enum value "dual"
	BandOperationMode1Dual BandOperationMode1 = "dual"

	// BandOperationMode1Nr24ghz captures enum value "2.4ghz"
	BandOperationMode1Nr24ghz BandOperationMode1 = "2.4ghz"

	// BandOperationMode1Nr5ghz captures enum value "5ghz"
	BandOperationMode1Nr5ghz BandOperationMode1 = "5ghz"
)

// for schema
var bandOperationMode1Enum []interface{}

func init() {
	var res []BandOperationMode1
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bandOperationMode1Enum = append(bandOperationMode1Enum, v)
	}
}

func (m BandOperationMode1) validateBandOperationMode1Enum(path, location string, value BandOperationMode1) error {
	if err := validate.Enum(path, location, value, bandOperationMode1Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this band operation mode1
func (m BandOperationMode1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBandOperationMode1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
