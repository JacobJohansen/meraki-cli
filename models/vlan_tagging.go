// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VlanTagging VlanTagging
//
// The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
//
// swagger:model VlanTagging
type VlanTagging struct {

	// settings
	Settings Settings5 `json:"settings,omitempty"`

	// The ID of the vlan you want to tag. This only applies if 'settings' is set to 'custom'.
	VlanID string `json:"vlanId,omitempty"`
}

// Validate validates this vlan tagging
func (m *VlanTagging) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VlanTagging) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if err := m.Settings.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("settings")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VlanTagging) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VlanTagging) UnmarshalBinary(b []byte) error {
	var res VlanTagging
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
