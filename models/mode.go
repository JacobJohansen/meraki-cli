// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Mode Mode
//
// Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)
//
// swagger:model Mode
type Mode string

const (

	// ModePrevention captures enum value "prevention"
	ModePrevention Mode = "prevention"

	// ModeDetection captures enum value "detection"
	ModeDetection Mode = "detection"

	// ModeDisabled captures enum value "disabled"
	ModeDisabled Mode = "disabled"
)

// for schema
var modeEnum []interface{}

func init() {
	var res []Mode
	if err := json.Unmarshal([]byte(`["prevention","detection","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modeEnum = append(modeEnum, v)
	}
}

func (m Mode) validateModeEnum(path, location string, value Mode) error {
	if err := validate.Enum(path, location, value, modeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this mode
func (m Mode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
