// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Type1 Type1
//
// The type of definition. Can be one of 'application', 'applicationCategory', 'host', 'port', 'ipRange' or 'localNet'.
//
// swagger:model Type1
type Type1 string

const (

	// Type1Application captures enum value "application"
	Type1Application Type1 = "application"

	// Type1ApplicationCategory captures enum value "applicationCategory"
	Type1ApplicationCategory Type1 = "applicationCategory"

	// Type1Host captures enum value "host"
	Type1Host Type1 = "host"

	// Type1Port captures enum value "port"
	Type1Port Type1 = "port"

	// Type1IPRange captures enum value "ipRange"
	Type1IPRange Type1 = "ipRange"

	// Type1LocalNet captures enum value "localNet"
	Type1LocalNet Type1 = "localNet"
)

// for schema
var type1Enum []interface{}

func init() {
	var res []Type1
	if err := json.Unmarshal([]byte(`["application","applicationCategory","host","port","ipRange","localNet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		type1Enum = append(type1Enum, v)
	}
}

func (m Type1) validateType1Enum(path, location string, value Type1) error {
	if err := validate.Enum(path, location, value, type1Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this type1
func (m Type1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateType1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
