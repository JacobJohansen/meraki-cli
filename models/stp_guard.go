// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StpGuard StpGuard
//
// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard')
//
// swagger:model StpGuard
type StpGuard string

const (

	// StpGuardDisabled captures enum value "disabled"
	StpGuardDisabled StpGuard = "disabled"

	// StpGuardRootGuard captures enum value "root guard"
	StpGuardRootGuard StpGuard = "root guard"

	// StpGuardBpduGuard captures enum value "bpdu guard"
	StpGuardBpduGuard StpGuard = "bpdu guard"

	// StpGuardLoopGuard captures enum value "loop guard"
	StpGuardLoopGuard StpGuard = "loop guard"
)

// for schema
var stpGuardEnum []interface{}

func init() {
	var res []StpGuard
	if err := json.Unmarshal([]byte(`["disabled","root guard","bpdu guard","loop guard"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stpGuardEnum = append(stpGuardEnum, v)
	}
}

func (m StpGuard) validateStpGuardEnum(path, location string, value StpGuard) error {
	if err := validate.Enum(path, location, value, stpGuardEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this stp guard
func (m StpGuard) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStpGuardEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
