// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkSecurityMalwareSettings updateNetworkSecurityMalwareSettings
//
// swagger:model updateNetworkSecurityMalwareSettings
type UpdateNetworkSecurityMalwareSettings struct {

	// The sha256 digests of files that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP whitelisting
	AllowedFiles []*AllowedFile `json:"allowedFiles"`

	// The urls that should be permitted by the malware detection engine. If omitted, the current config will remain unchanged. This is available only if your network supports AMP whitelisting
	AllowedUrls []*AllowedURL `json:"allowedUrls"`

	// mode
	// Required: true
	Mode Mode1 `json:"mode"`
}

// Validate validates this update network security malware settings
func (m *UpdateNetworkSecurityMalwareSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowedUrls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNetworkSecurityMalwareSettings) validateAllowedFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedFiles); i++ {
		if swag.IsZero(m.AllowedFiles[i]) { // not required
			continue
		}

		if m.AllowedFiles[i] != nil {
			if err := m.AllowedFiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowedFiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateNetworkSecurityMalwareSettings) validateAllowedUrls(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedUrls) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedUrls); i++ {
		if swag.IsZero(m.AllowedUrls[i]) { // not required
			continue
		}

		if m.AllowedUrls[i] != nil {
			if err := m.AllowedUrls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowedUrls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateNetworkSecurityMalwareSettings) validateMode(formats strfmt.Registry) error {

	if err := m.Mode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNetworkSecurityMalwareSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNetworkSecurityMalwareSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSecurityMalwareSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
