// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MajorMinorAssignmentMode MajorMinorAssignmentMode
//
// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
//
// swagger:model MajorMinorAssignmentMode
type MajorMinorAssignmentMode string

const (

	// MajorMinorAssignmentModeUnique captures enum value "Unique"
	MajorMinorAssignmentModeUnique MajorMinorAssignmentMode = "Unique"

	// MajorMinorAssignmentModeNonUnique captures enum value "Non-unique"
	MajorMinorAssignmentModeNonUnique MajorMinorAssignmentMode = "Non-unique"
)

// for schema
var majorMinorAssignmentModeEnum []interface{}

func init() {
	var res []MajorMinorAssignmentMode
	if err := json.Unmarshal([]byte(`["Unique","Non-unique"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		majorMinorAssignmentModeEnum = append(majorMinorAssignmentModeEnum, v)
	}
}

func (m MajorMinorAssignmentMode) validateMajorMinorAssignmentModeEnum(path, location string, value MajorMinorAssignmentMode) error {
	if err := validate.Enum(path, location, value, majorMinorAssignmentModeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this major minor assignment mode
func (m MajorMinorAssignmentMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMajorMinorAssignmentModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
