// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthMode AuthMode
//
// The association control method for the SSID ('open', 'psk', 'open-with-radius', '8021x-meraki' or '8021x-radius')
//
// swagger:model AuthMode
type AuthMode string

const (

	// AuthModeOpen captures enum value "open"
	AuthModeOpen AuthMode = "open"

	// AuthModePsk captures enum value "psk"
	AuthModePsk AuthMode = "psk"

	// AuthModeOpenWithRadius captures enum value "open-with-radius"
	AuthModeOpenWithRadius AuthMode = "open-with-radius"

	// AuthModeNr8021xMeraki captures enum value "8021x-meraki"
	AuthModeNr8021xMeraki AuthMode = "8021x-meraki"

	// AuthModeNr8021xRadius captures enum value "8021x-radius"
	AuthModeNr8021xRadius AuthMode = "8021x-radius"
)

// for schema
var authModeEnum []interface{}

func init() {
	var res []AuthMode
	if err := json.Unmarshal([]byte(`["open","psk","open-with-radius","8021x-meraki","8021x-radius"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authModeEnum = append(authModeEnum, v)
	}
}

func (m AuthMode) validateAuthModeEnum(path, location string, value AuthMode) error {
	if err := validate.Enum(path, location, value, authModeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this auth mode
func (m AuthMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
