// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkWirelessRfProfile updateNetworkWirelessRfProfile
//
// swagger:model updateNetworkWirelessRfProfile
type UpdateNetworkWirelessRfProfile struct {

	// ap band settings
	ApBandSettings *ApBandSettings1 `json:"apBandSettings,omitempty"`

	// band selection type
	BandSelectionType BandSelectionType1 `json:"bandSelectionType,omitempty"`

	// Steers client to best available access point. Can be either true or false.
	ClientBalancingEnabled bool `json:"clientBalancingEnabled,omitempty"`

	// five ghz settings
	FiveGhzSettings *FiveGhzSettings1 `json:"fiveGhzSettings,omitempty"`

	// min bitrate type
	MinBitrateType MinBitrateType1 `json:"minBitrateType,omitempty"`

	// The name of the new profile. Must be unique.
	Name string `json:"name,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *TwoFourGhzSettings1 `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this update network wireless rf profile
func (m *UpdateNetworkWirelessRfProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApBandSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBandSelectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinBitrateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNetworkWirelessRfProfile) validateApBandSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.ApBandSettings) { // not required
		return nil
	}

	if m.ApBandSettings != nil {
		if err := m.ApBandSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apBandSettings")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateNetworkWirelessRfProfile) validateBandSelectionType(formats strfmt.Registry) error {

	if swag.IsZero(m.BandSelectionType) { // not required
		return nil
	}

	if err := m.BandSelectionType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bandSelectionType")
		}
		return err
	}

	return nil
}

func (m *UpdateNetworkWirelessRfProfile) validateFiveGhzSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.FiveGhzSettings) { // not required
		return nil
	}

	if m.FiveGhzSettings != nil {
		if err := m.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateNetworkWirelessRfProfile) validateMinBitrateType(formats strfmt.Registry) error {

	if swag.IsZero(m.MinBitrateType) { // not required
		return nil
	}

	if err := m.MinBitrateType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("minBitrateType")
		}
		return err
	}

	return nil
}

func (m *UpdateNetworkWirelessRfProfile) validateTwoFourGhzSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.TwoFourGhzSettings) { // not required
		return nil
	}

	if m.TwoFourGhzSettings != nil {
		if err := m.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNetworkWirelessRfProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNetworkWirelessRfProfile) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
