// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Settings4 Settings4
//
// How URL categories are applied. Can be 'network default', 'append' or 'override'.
//
// swagger:model Settings4
type Settings4 string

const (

	// Settings4NetworkDefault captures enum value "network default"
	Settings4NetworkDefault Settings4 = "network default"

	// Settings4Append captures enum value "append"
	Settings4Append Settings4 = "append"

	// Settings4Override captures enum value "override"
	Settings4Override Settings4 = "override"
)

// for schema
var settings4Enum []interface{}

func init() {
	var res []Settings4
	if err := json.Unmarshal([]byte(`["network default","append","override"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settings4Enum = append(settings4Enum, v)
	}
}

func (m Settings4) validateSettings4Enum(path, location string, value Settings4) error {
	if err := validate.Enum(path, location, value, settings4Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this settings4
func (m Settings4) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSettings4Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
