// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrgAccess OrgAccess
//
// The privilege of the dashboard administrator on the organization. Can be one of 'full', 'read-only', 'enterprise' or 'none'
//
// swagger:model OrgAccess
type OrgAccess string

const (

	// OrgAccessFull captures enum value "full"
	OrgAccessFull OrgAccess = "full"

	// OrgAccessReadOnly captures enum value "read-only"
	OrgAccessReadOnly OrgAccess = "read-only"

	// OrgAccessEnterprise captures enum value "enterprise"
	OrgAccessEnterprise OrgAccess = "enterprise"

	// OrgAccessNone captures enum value "none"
	OrgAccessNone OrgAccess = "none"
)

// for schema
var orgAccessEnum []interface{}

func init() {
	var res []OrgAccess
	if err := json.Unmarshal([]byte(`["full","read-only","enterprise","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orgAccessEnum = append(orgAccessEnum, v)
	}
}

func (m OrgAccess) validateOrgAccessEnum(path, location string, value OrgAccess) error {
	if err := validate.Enum(path, location, value, orgAccessEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this org access
func (m OrgAccess) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrgAccessEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
