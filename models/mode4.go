// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Mode4 Mode4
//
// Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. This parameter is legacy and only applies to coterm licensing; it should not be specified when claiming per-device licenses. Please see <a target='_blank' href='https://documentation.meraki.com/zGeneral_Administration/Licensing/Adding_an_Enterprise_license_to_an_existing_Dashboard_account'>this article</a> for more information.
//
// swagger:model Mode4
type Mode4 string

const (

	// Mode4AddDevices captures enum value "addDevices"
	Mode4AddDevices Mode4 = "addDevices"

	// Mode4Renew captures enum value "renew"
	Mode4Renew Mode4 = "renew"
)

// for schema
var mode4Enum []interface{}

func init() {
	var res []Mode4
	if err := json.Unmarshal([]byte(`["addDevices","renew"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mode4Enum = append(mode4Enum, v)
	}
}

func (m Mode4) validateMode4Enum(path, location string, value Mode4) error {
	if err := validate.Enum(path, location, value, mode4Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this mode4
func (m Mode4) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMode4Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
