// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkVlan updateNetworkVlan
//
// swagger:model updateNetworkVlan
type UpdateNetworkVlan struct {

	// The local IP of the appliance on the VLAN
	ApplianceIP string `json:"applianceIp,omitempty"`

	// DHCP boot option for boot filename
	DhcpBootFilename string `json:"dhcpBootFilename,omitempty"`

	// DHCP boot option to direct boot clients to the server to load the boot file from
	DhcpBootNextServer string `json:"dhcpBootNextServer,omitempty"`

	// Use DHCP boot options specified in other properties
	DhcpBootOptionsEnabled bool `json:"dhcpBootOptionsEnabled,omitempty"`

	// dhcp handling
	DhcpHandling DhcpHandling `json:"dhcpHandling,omitempty"`

	// dhcp lease time
	DhcpLeaseTime DhcpLeaseTime `json:"dhcpLeaseTime,omitempty"`

	// The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
	DhcpOptions []*DhcpOption `json:"dhcpOptions"`

	// The IPs of the DHCP servers that DHCP requests should be relayed to
	DhcpRelayServerIps []string `json:"dhcpRelayServerIps"`

	// The DNS nameservers used for DHCP responses, either "upstream_dns", "google_dns", "opendns", or a newline seperated string of IP addresses or domain names
	DNSNameservers string `json:"dnsNameservers,omitempty"`

	// The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain "ip" and "name" string fields. See the sample request/response for more details.
	FixedIPAssignments interface{} `json:"fixedIpAssignments,omitempty"`

	// The name of the VLAN
	Name string `json:"name,omitempty"`

	// The DHCP reserved IP ranges on the VLAN
	ReservedIPRanges []*ReservedIPRange1 `json:"reservedIpRanges"`

	// The subnet of the VLAN
	Subnet string `json:"subnet,omitempty"`

	// The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
	VpnNatSubnet string `json:"vpnNatSubnet,omitempty"`
}

// Validate validates this update network vlan
func (m *UpdateNetworkVlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDhcpHandling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpLeaseTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReservedIPRanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNetworkVlan) validateDhcpHandling(formats strfmt.Registry) error {

	if swag.IsZero(m.DhcpHandling) { // not required
		return nil
	}

	if err := m.DhcpHandling.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dhcpHandling")
		}
		return err
	}

	return nil
}

func (m *UpdateNetworkVlan) validateDhcpLeaseTime(formats strfmt.Registry) error {

	if swag.IsZero(m.DhcpLeaseTime) { // not required
		return nil
	}

	if err := m.DhcpLeaseTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dhcpLeaseTime")
		}
		return err
	}

	return nil
}

func (m *UpdateNetworkVlan) validateDhcpOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.DhcpOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.DhcpOptions); i++ {
		if swag.IsZero(m.DhcpOptions[i]) { // not required
			continue
		}

		if m.DhcpOptions[i] != nil {
			if err := m.DhcpOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dhcpOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateNetworkVlan) validateReservedIPRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.ReservedIPRanges) { // not required
		return nil
	}

	for i := 0; i < len(m.ReservedIPRanges); i++ {
		if swag.IsZero(m.ReservedIPRanges[i]) { // not required
			continue
		}

		if m.ReservedIPRanges[i] != nil {
			if err := m.ReservedIPRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reservedIpRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNetworkVlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNetworkVlan) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkVlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
