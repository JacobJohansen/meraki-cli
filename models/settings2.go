// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Settings2 Settings2
//
// How URL patterns are applied. Can be 'network default', 'append' or 'override'.
//
// swagger:model Settings2
type Settings2 string

const (

	// Settings2NetworkDefault captures enum value "network default"
	Settings2NetworkDefault Settings2 = "network default"

	// Settings2Append captures enum value "append"
	Settings2Append Settings2 = "append"

	// Settings2Override captures enum value "override"
	Settings2Override Settings2 = "override"
)

// for schema
var settings2Enum []interface{}

func init() {
	var res []Settings2
	if err := json.Unmarshal([]byte(`["network default","append","override"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settings2Enum = append(settings2Enum, v)
	}
}

func (m Settings2) validateSettings2Enum(path, location string, value Settings2) error {
	if err := validate.Enum(path, location, value, settings2Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this settings2
func (m Settings2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSettings2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
