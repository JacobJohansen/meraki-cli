// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Type5 Type5
//
// Type of the L7 rule. One of: 'application', 'applicationCategory', 'host', 'port', 'ipRange'
//
// swagger:model Type5
type Type5 string

const (

	// Type5Application captures enum value "application"
	Type5Application Type5 = "application"

	// Type5ApplicationCategory captures enum value "applicationCategory"
	Type5ApplicationCategory Type5 = "applicationCategory"

	// Type5Host captures enum value "host"
	Type5Host Type5 = "host"

	// Type5Port captures enum value "port"
	Type5Port Type5 = "port"

	// Type5IPRange captures enum value "ipRange"
	Type5IPRange Type5 = "ipRange"
)

// for schema
var type5Enum []interface{}

func init() {
	var res []Type5
	if err := json.Unmarshal([]byte(`["application","applicationCategory","host","port","ipRange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		type5Enum = append(type5Enum, v)
	}
}

func (m Type5) validateType5Enum(path, location string, value Type5) error {
	if err := validate.Enum(path, location, value, type5Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this type5
func (m Type5) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateType5Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
