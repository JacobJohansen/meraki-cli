// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Uplink3 Uplink3
//
// The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')
//
// swagger:model Uplink3
type Uplink3 string

const (

	// Uplink3Internet1 captures enum value "internet1"
	Uplink3Internet1 Uplink3 = "internet1"

	// Uplink3Internet2 captures enum value "internet2"
	Uplink3Internet2 Uplink3 = "internet2"

	// Uplink3Both captures enum value "both"
	Uplink3Both Uplink3 = "both"
)

// for schema
var uplink3Enum []interface{}

func init() {
	var res []Uplink3
	if err := json.Unmarshal([]byte(`["internet1","internet2","both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		uplink3Enum = append(uplink3Enum, v)
	}
}

func (m Uplink3) validateUplink3Enum(path, location string, value Uplink3) error {
	if err := validate.Enum(path, location, value, uplink3Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this uplink3
func (m Uplink3) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUplink3Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
