// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DevicePolicy DevicePolicy
//
// The policy to apply to the specified client. Can be 'Group policy', 'Whitelisted', 'Blocked', 'Per connection' or 'Normal'. Required.
//
// swagger:model DevicePolicy
type DevicePolicy string

const (

	// DevicePolicyGroupPolicy captures enum value "Group policy"
	DevicePolicyGroupPolicy DevicePolicy = "Group policy"

	// DevicePolicyWhitelisted captures enum value "Whitelisted"
	DevicePolicyWhitelisted DevicePolicy = "Whitelisted"

	// DevicePolicyBlocked captures enum value "Blocked"
	DevicePolicyBlocked DevicePolicy = "Blocked"

	// DevicePolicyPerConnection captures enum value "Per connection"
	DevicePolicyPerConnection DevicePolicy = "Per connection"

	// DevicePolicyNormal captures enum value "Normal"
	DevicePolicyNormal DevicePolicy = "Normal"
)

// for schema
var devicePolicyEnum []interface{}

func init() {
	var res []DevicePolicy
	if err := json.Unmarshal([]byte(`["Group policy","Whitelisted","Blocked","Per connection","Normal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicePolicyEnum = append(devicePolicyEnum, v)
	}
}

func (m DevicePolicy) validateDevicePolicyEnum(path, location string, value DevicePolicy) error {
	if err := validate.Enum(path, location, value, devicePolicyEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this device policy
func (m DevicePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDevicePolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
