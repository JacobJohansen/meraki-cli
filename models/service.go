// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Service Service
//
// swagger:model Service
type Service string

const (

	// ServiceAllServices captures enum value "All Services"
	ServiceAllServices Service = "All Services"

	// ServiceAirPlay captures enum value "AirPlay"
	ServiceAirPlay Service = "AirPlay"

	// ServiceAFP captures enum value "AFP"
	ServiceAFP Service = "AFP"

	// ServiceBitTorrent captures enum value "BitTorrent"
	ServiceBitTorrent Service = "BitTorrent"

	// ServiceFTP captures enum value "FTP"
	ServiceFTP Service = "FTP"

	// ServiceIChat captures enum value "iChat"
	ServiceIChat Service = "iChat"

	// ServiceITunes captures enum value "iTunes"
	ServiceITunes Service = "iTunes"

	// ServicePrinters captures enum value "Printers"
	ServicePrinters Service = "Printers"

	// ServiceSamba captures enum value "Samba"
	ServiceSamba Service = "Samba"

	// ServiceScanners captures enum value "Scanners"
	ServiceScanners Service = "Scanners"

	// ServiceSSH captures enum value "SSH"
	ServiceSSH Service = "SSH"
)

// for schema
var serviceEnum []interface{}

func init() {
	var res []Service
	if err := json.Unmarshal([]byte(`["All Services","AirPlay","AFP","BitTorrent","FTP","iChat","iTunes","Printers","Samba","Scanners","SSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceEnum = append(serviceEnum, v)
	}
}

func (m Service) validateServiceEnum(path, location string, value Service) error {
	if err := validate.Enum(path, location, value, serviceEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this service
func (m Service) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
