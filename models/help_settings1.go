// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HelpSettings1 HelpSettings1
//
// Settings for describing the modifications to various Help page features. Each property in this object accepts one of
//     'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show
//     the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
//     Dashboard; see the documentation for each property to see the allowed values.
//
// swagger:model HelpSettings1
type HelpSettings1 struct {

	// api docs subtab
	APIDocsSubtab APIDocsSubtab `json:"apiDocsSubtab,omitempty"`

	// cases subtab
	CasesSubtab CasesSubtab `json:"casesSubtab,omitempty"`

	// The 'Product Manuals' section of the 'Help -> Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
	CiscoMerakiProductDocumentation string `json:"ciscoMerakiProductDocumentation,omitempty"`

	// community subtab
	CommunitySubtab CommunitySubtab `json:"communitySubtab,omitempty"`

	// data protection requests subtab
	DataProtectionRequestsSubtab DataProtectionRequestsSubtab `json:"dataProtectionRequestsSubtab,omitempty"`

	// firewall info subtab
	FirewallInfoSubtab FirewallInfoSubtab `json:"firewallInfoSubtab,omitempty"`

	// get help subtab
	GetHelpSubtab GetHelpSubtab `json:"getHelpSubtab,omitempty"`

	// The KB search box which appears on the Help page. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
	GetHelpSubtabKnowledgeBaseSearch string `json:"getHelpSubtabKnowledgeBaseSearch,omitempty"`

	// hardware replacements subtab
	HardwareReplacementsSubtab HardwareReplacementsSubtab `json:"hardwareReplacementsSubtab,omitempty"`

	// help tab
	HelpTab HelpTab `json:"helpTab,omitempty"`

	// new features subtab
	NewFeaturesSubtab NewFeaturesSubtab `json:"newFeaturesSubtab,omitempty"`

	// sm forums
	SmForums SmForums `json:"smForums,omitempty"`

	// The 'Contact Meraki Support' section of the 'Help -> Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
	SupportContactInfo string `json:"supportContactInfo,omitempty"`

	// universal search knowledge base search
	UniversalSearchKnowledgeBaseSearch UniversalSearchKnowledgeBaseSearch `json:"universalSearchKnowledgeBaseSearch,omitempty"`
}

// Validate validates this help settings1
func (m *HelpSettings1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIDocsSubtab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCasesSubtab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunitySubtab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataProtectionRequestsSubtab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirewallInfoSubtab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetHelpSubtab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareReplacementsSubtab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelpTab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewFeaturesSubtab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmForums(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniversalSearchKnowledgeBaseSearch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelpSettings1) validateAPIDocsSubtab(formats strfmt.Registry) error {

	if swag.IsZero(m.APIDocsSubtab) { // not required
		return nil
	}

	if err := m.APIDocsSubtab.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("apiDocsSubtab")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateCasesSubtab(formats strfmt.Registry) error {

	if swag.IsZero(m.CasesSubtab) { // not required
		return nil
	}

	if err := m.CasesSubtab.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("casesSubtab")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateCommunitySubtab(formats strfmt.Registry) error {

	if swag.IsZero(m.CommunitySubtab) { // not required
		return nil
	}

	if err := m.CommunitySubtab.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("communitySubtab")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateDataProtectionRequestsSubtab(formats strfmt.Registry) error {

	if swag.IsZero(m.DataProtectionRequestsSubtab) { // not required
		return nil
	}

	if err := m.DataProtectionRequestsSubtab.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataProtectionRequestsSubtab")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateFirewallInfoSubtab(formats strfmt.Registry) error {

	if swag.IsZero(m.FirewallInfoSubtab) { // not required
		return nil
	}

	if err := m.FirewallInfoSubtab.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("firewallInfoSubtab")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateGetHelpSubtab(formats strfmt.Registry) error {

	if swag.IsZero(m.GetHelpSubtab) { // not required
		return nil
	}

	if err := m.GetHelpSubtab.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getHelpSubtab")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateHardwareReplacementsSubtab(formats strfmt.Registry) error {

	if swag.IsZero(m.HardwareReplacementsSubtab) { // not required
		return nil
	}

	if err := m.HardwareReplacementsSubtab.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hardwareReplacementsSubtab")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateHelpTab(formats strfmt.Registry) error {

	if swag.IsZero(m.HelpTab) { // not required
		return nil
	}

	if err := m.HelpTab.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("helpTab")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateNewFeaturesSubtab(formats strfmt.Registry) error {

	if swag.IsZero(m.NewFeaturesSubtab) { // not required
		return nil
	}

	if err := m.NewFeaturesSubtab.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("newFeaturesSubtab")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateSmForums(formats strfmt.Registry) error {

	if swag.IsZero(m.SmForums) { // not required
		return nil
	}

	if err := m.SmForums.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("smForums")
		}
		return err
	}

	return nil
}

func (m *HelpSettings1) validateUniversalSearchKnowledgeBaseSearch(formats strfmt.Registry) error {

	if swag.IsZero(m.UniversalSearchKnowledgeBaseSearch) { // not required
		return nil
	}

	if err := m.UniversalSearchKnowledgeBaseSearch.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("universalSearchKnowledgeBaseSearch")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelpSettings1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelpSettings1) UnmarshalBinary(b []byte) error {
	var res HelpSettings1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
