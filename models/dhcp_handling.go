// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DhcpHandling DhcpHandling
//
// The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
//
// swagger:model DhcpHandling
type DhcpHandling string

const (

	// DhcpHandlingRunaDHCPServer captures enum value "Run a DHCP server"
	DhcpHandlingRunaDHCPServer DhcpHandling = "Run a DHCP server"

	// DhcpHandlingRelayDHCPToAnotherServer captures enum value "Relay DHCP to another server"
	DhcpHandlingRelayDHCPToAnotherServer DhcpHandling = "Relay DHCP to another server"

	// DhcpHandlingDoNotRespondToDHCPRequests captures enum value "Do not respond to DHCP requests"
	DhcpHandlingDoNotRespondToDHCPRequests DhcpHandling = "Do not respond to DHCP requests"
)

// for schema
var dhcpHandlingEnum []interface{}

func init() {
	var res []DhcpHandling
	if err := json.Unmarshal([]byte(`["Run a DHCP server","Relay DHCP to another server","Do not respond to DHCP requests"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dhcpHandlingEnum = append(dhcpHandlingEnum, v)
	}
}

func (m DhcpHandling) validateDhcpHandlingEnum(path, location string, value DhcpHandling) error {
	if err := validate.Enum(path, location, value, dhcpHandlingEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this dhcp handling
func (m DhcpHandling) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDhcpHandlingEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
