// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Wan1 Wan1
//
// WAN 1 settings
//
// swagger:model Wan1
type Wan1 struct {

	// Up to two DNS IPs.
	StaticDNS []string `json:"staticDns"`

	// The IP of the gateway on the WAN.
	StaticGatewayIP string `json:"staticGatewayIp,omitempty"`

	// The IP the device should use on the WAN.
	StaticIP string `json:"staticIp,omitempty"`

	// The subnet mask for the WAN.
	StaticSubnetMask string `json:"staticSubnetMask,omitempty"`

	// Configue the interface to have static IP settings or use DHCP.
	UsingStaticIP bool `json:"usingStaticIp,omitempty"`

	// The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
	Vlan int32 `json:"vlan,omitempty"`

	// wan enabled
	WanEnabled WanEnabled `json:"wanEnabled,omitempty"`
}

// Validate validates this wan1
func (m *Wan1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWanEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wan1) validateWanEnabled(formats strfmt.Registry) error {

	if swag.IsZero(m.WanEnabled) { // not required
		return nil
	}

	if err := m.WanEnabled.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wanEnabled")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Wan1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wan1) UnmarshalBinary(b []byte) error {
	var res Wan1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
