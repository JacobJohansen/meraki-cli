// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Resolution4 Resolution4
//
// Resolution of the camera. Can be one of '1280x720', '1920x1080' or '2688x1512'.
//
// swagger:model Resolution4
type Resolution4 string

const (

	// Resolution4Nr1280x720 captures enum value "1280x720"
	Resolution4Nr1280x720 Resolution4 = "1280x720"

	// Resolution4Nr1920x1080 captures enum value "1920x1080"
	Resolution4Nr1920x1080 Resolution4 = "1920x1080"

	// Resolution4Nr2688x1512 captures enum value "2688x1512"
	Resolution4Nr2688x1512 Resolution4 = "2688x1512"
)

// for schema
var resolution4Enum []interface{}

func init() {
	var res []Resolution4
	if err := json.Unmarshal([]byte(`["1280x720","1920x1080","2688x1512"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resolution4Enum = append(resolution4Enum, v)
	}
}

func (m Resolution4) validateResolution4Enum(path, location string, value Resolution4) error {
	if err := validate.Enum(path, location, value, resolution4Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this resolution4
func (m Resolution4) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResolution4Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
