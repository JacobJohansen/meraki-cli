// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkSecurityIntrusionSettings updateNetworkSecurityIntrusionSettings
//
// swagger:model updateNetworkSecurityIntrusionSettings
type UpdateNetworkSecurityIntrusionSettings struct {

	// ids rulesets
	IdsRulesets IdsRulesets `json:"idsRulesets,omitempty"`

	// mode
	Mode Mode `json:"mode,omitempty"`

	// protected networks
	ProtectedNetworks *ProtectedNetworks `json:"protectedNetworks,omitempty"`
}

// Validate validates this update network security intrusion settings
func (m *UpdateNetworkSecurityIntrusionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdsRulesets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedNetworks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNetworkSecurityIntrusionSettings) validateIdsRulesets(formats strfmt.Registry) error {

	if swag.IsZero(m.IdsRulesets) { // not required
		return nil
	}

	if err := m.IdsRulesets.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("idsRulesets")
		}
		return err
	}

	return nil
}

func (m *UpdateNetworkSecurityIntrusionSettings) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *UpdateNetworkSecurityIntrusionSettings) validateProtectedNetworks(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtectedNetworks) { // not required
		return nil
	}

	if m.ProtectedNetworks != nil {
		if err := m.ProtectedNetworks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protectedNetworks")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNetworkSecurityIntrusionSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNetworkSecurityIntrusionSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSecurityIntrusionSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
