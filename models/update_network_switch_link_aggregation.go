// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkSwitchLinkAggregation updateNetworkSwitchLinkAggregation
//
// swagger:model updateNetworkSwitchLinkAggregation
type UpdateNetworkSwitchLinkAggregation struct {

	// Array of switch or stack ports for updating aggregation group. Minimum 2 and maximum 8 ports are supported.
	SwitchPorts []*SwitchPort `json:"switchPorts"`

	// Array of switch profile ports for updating aggregation group. Minimum 2 and maximum 8 ports are supported.
	SwitchProfilePorts []*SwitchProfilePort `json:"switchProfilePorts"`
}

// Validate validates this update network switch link aggregation
func (m *UpdateNetworkSwitchLinkAggregation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSwitchPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitchProfilePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNetworkSwitchLinkAggregation) validateSwitchPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.SwitchPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.SwitchPorts); i++ {
		if swag.IsZero(m.SwitchPorts[i]) { // not required
			continue
		}

		if m.SwitchPorts[i] != nil {
			if err := m.SwitchPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("switchPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateNetworkSwitchLinkAggregation) validateSwitchProfilePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.SwitchProfilePorts) { // not required
		return nil
	}

	for i := 0; i < len(m.SwitchProfilePorts); i++ {
		if swag.IsZero(m.SwitchProfilePorts[i]) { // not required
			continue
		}

		if m.SwitchProfilePorts[i] != nil {
			if err := m.SwitchProfilePorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("switchProfilePorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNetworkSwitchLinkAggregation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNetworkSwitchLinkAggregation) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchLinkAggregation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
