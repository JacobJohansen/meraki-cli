// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FirewallAndTrafficShaping FirewallAndTrafficShaping
//
// The firewall and traffic shaping rules and settings for your policy.
//
// swagger:model FirewallAndTrafficShaping
type FirewallAndTrafficShaping struct {

	// An ordered array of the L3 firewall rules
	L3FirewallRules []*L3FirewallRule `json:"l3FirewallRules"`

	// An ordered array of L7 firewall rules
	L7FirewallRules []*L7FirewallRule `json:"l7FirewallRules"`

	// settings
	Settings Settings1 `json:"settings,omitempty"`

	// An array of traffic shaping rules. Rules are applied in the order that
	//     they are specified in. An empty list (or null) means no rules. Note that
	//     you are allowed a maximum of 8 rules.
	TrafficShapingRules []*TrafficShapingRule `json:"trafficShapingRules"`
}

// Validate validates this firewall and traffic shaping
func (m *FirewallAndTrafficShaping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateL3FirewallRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateL7FirewallRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficShapingRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirewallAndTrafficShaping) validateL3FirewallRules(formats strfmt.Registry) error {

	if swag.IsZero(m.L3FirewallRules) { // not required
		return nil
	}

	for i := 0; i < len(m.L3FirewallRules); i++ {
		if swag.IsZero(m.L3FirewallRules[i]) { // not required
			continue
		}

		if m.L3FirewallRules[i] != nil {
			if err := m.L3FirewallRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("l3FirewallRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FirewallAndTrafficShaping) validateL7FirewallRules(formats strfmt.Registry) error {

	if swag.IsZero(m.L7FirewallRules) { // not required
		return nil
	}

	for i := 0; i < len(m.L7FirewallRules); i++ {
		if swag.IsZero(m.L7FirewallRules[i]) { // not required
			continue
		}

		if m.L7FirewallRules[i] != nil {
			if err := m.L7FirewallRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("l7FirewallRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FirewallAndTrafficShaping) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if err := m.Settings.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("settings")
		}
		return err
	}

	return nil
}

func (m *FirewallAndTrafficShaping) validateTrafficShapingRules(formats strfmt.Registry) error {

	if swag.IsZero(m.TrafficShapingRules) { // not required
		return nil
	}

	for i := 0; i < len(m.TrafficShapingRules); i++ {
		if swag.IsZero(m.TrafficShapingRules[i]) { // not required
			continue
		}

		if m.TrafficShapingRules[i] != nil {
			if err := m.TrafficShapingRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trafficShapingRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirewallAndTrafficShaping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirewallAndTrafficShaping) UnmarshalBinary(b []byte) error {
	var res FirewallAndTrafficShaping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
