// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOrganizationBrandingPolicy createOrganizationBrandingPolicy
//
// swagger:model createOrganizationBrandingPolicy
type CreateOrganizationBrandingPolicy struct {

	// admin settings
	// Required: true
	AdminSettings *AdminSettings `json:"adminSettings"`

	// Boolean indicating whether this policy is enabled.
	// Required: true
	Enabled *bool `json:"enabled"`

	// help settings
	HelpSettings *HelpSettings `json:"helpSettings,omitempty"`

	// Name of the Dashboard branding policy.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this create organization branding policy
func (m *CreateOrganizationBrandingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelpSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOrganizationBrandingPolicy) validateAdminSettings(formats strfmt.Registry) error {

	if err := validate.Required("adminSettings", "body", m.AdminSettings); err != nil {
		return err
	}

	if m.AdminSettings != nil {
		if err := m.AdminSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminSettings")
			}
			return err
		}
	}

	return nil
}

func (m *CreateOrganizationBrandingPolicy) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *CreateOrganizationBrandingPolicy) validateHelpSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.HelpSettings) { // not required
		return nil
	}

	if m.HelpSettings != nil {
		if err := m.HelpSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helpSettings")
			}
			return err
		}
	}

	return nil
}

func (m *CreateOrganizationBrandingPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateOrganizationBrandingPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOrganizationBrandingPolicy) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationBrandingPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
