// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvisionNetworkClients provisionNetworkClients
//
// swagger:model provisionNetworkClients
type ProvisionNetworkClients struct {

	// device policy
	// Required: true
	DevicePolicy DevicePolicy `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`

	// The MAC address of the client. Required.
	// Required: true
	Mac *string `json:"mac"`

	// The display name for the client. Optional. Limited to 255 bytes.
	Name string `json:"name,omitempty"`

	// policies by security appliance
	PoliciesBySecurityAppliance *PoliciesBySecurityAppliance `json:"policiesBySecurityAppliance,omitempty"`

	// An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client's policy
	PoliciesBySsid map[string]GeneratedObject `json:"policiesBySsid,omitempty"`
}

// Validate validates this provision network clients
func (m *ProvisionNetworkClients) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoliciesBySecurityAppliance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoliciesBySsid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProvisionNetworkClients) validateDevicePolicy(formats strfmt.Registry) error {

	if err := m.DevicePolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("devicePolicy")
		}
		return err
	}

	return nil
}

func (m *ProvisionNetworkClients) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	return nil
}

func (m *ProvisionNetworkClients) validatePoliciesBySecurityAppliance(formats strfmt.Registry) error {

	if swag.IsZero(m.PoliciesBySecurityAppliance) { // not required
		return nil
	}

	if m.PoliciesBySecurityAppliance != nil {
		if err := m.PoliciesBySecurityAppliance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policiesBySecurityAppliance")
			}
			return err
		}
	}

	return nil
}

func (m *ProvisionNetworkClients) validatePoliciesBySsid(formats strfmt.Registry) error {

	if swag.IsZero(m.PoliciesBySsid) { // not required
		return nil
	}

	for k := range m.PoliciesBySsid {

		if err := validate.Required("policiesBySsid"+"."+k, "body", m.PoliciesBySsid[k]); err != nil {
			return err
		}
		if val, ok := m.PoliciesBySsid[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProvisionNetworkClients) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvisionNetworkClients) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClients
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
