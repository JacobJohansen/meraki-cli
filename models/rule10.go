// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rule10 Rule10
//
// swagger:model Rule10
type Rule10 struct {

	// Description of the rule (optional)
	Comment string `json:"comment,omitempty"`

	// Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
	// Required: true
	DestCidr *string `json:"destCidr"`

	// Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
	DestPort string `json:"destPort,omitempty"`

	// policy
	// Required: true
	Policy Policy `json:"policy"`

	// protocol
	// Required: true
	Protocol Protocol `json:"protocol"`
}

// Validate validates this rule10
func (m *Rule10) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rule10) validateDestCidr(formats strfmt.Registry) error {

	if err := validate.Required("destCidr", "body", m.DestCidr); err != nil {
		return err
	}

	return nil
}

func (m *Rule10) validatePolicy(formats strfmt.Registry) error {

	if err := m.Policy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policy")
		}
		return err
	}

	return nil
}

func (m *Rule10) validateProtocol(formats strfmt.Registry) error {

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rule10) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule10) UnmarshalBinary(b []byte) error {
	var res Rule10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
