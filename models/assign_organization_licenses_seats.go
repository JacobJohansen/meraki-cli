// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssignOrganizationLicensesSeats assignOrganizationLicensesSeats
//
// swagger:model assignOrganizationLicensesSeats
type AssignOrganizationLicensesSeats struct {

	// The ID of the SM license to assign seats from
	// Required: true
	LicenseID *string `json:"licenseId"`

	// The ID of the SM network to assign the seats to
	// Required: true
	NetworkID *string `json:"networkId"`

	// The number of seats to assign to the SM network. Must be less than or equal to the total number of seats of the license
	// Required: true
	SeatCount *int32 `json:"seatCount"`
}

// Validate validates this assign organization licenses seats
func (m *AssignOrganizationLicensesSeats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLicenseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeatCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssignOrganizationLicensesSeats) validateLicenseID(formats strfmt.Registry) error {

	if err := validate.Required("licenseId", "body", m.LicenseID); err != nil {
		return err
	}

	return nil
}

func (m *AssignOrganizationLicensesSeats) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("networkId", "body", m.NetworkID); err != nil {
		return err
	}

	return nil
}

func (m *AssignOrganizationLicensesSeats) validateSeatCount(formats strfmt.Registry) error {

	if err := validate.Required("seatCount", "body", m.SeatCount); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssignOrganizationLicensesSeats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssignOrganizationLicensesSeats) UnmarshalBinary(b []byte) error {
	var res AssignOrganizationLicensesSeats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
