// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WpaEncryptionMode WpaEncryptionMode
//
// The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only')
//
// swagger:model WpaEncryptionMode
type WpaEncryptionMode string

const (

	// WpaEncryptionModeWPA1Only captures enum value "WPA1 only"
	WpaEncryptionModeWPA1Only WpaEncryptionMode = "WPA1 only"

	// WpaEncryptionModeWPA1AndWPA2 captures enum value "WPA1 and WPA2"
	WpaEncryptionModeWPA1AndWPA2 WpaEncryptionMode = "WPA1 and WPA2"

	// WpaEncryptionModeWPA2Only captures enum value "WPA2 only"
	WpaEncryptionModeWPA2Only WpaEncryptionMode = "WPA2 only"

	// WpaEncryptionModeWPA3TransitionMode captures enum value "WPA3 Transition Mode"
	WpaEncryptionModeWPA3TransitionMode WpaEncryptionMode = "WPA3 Transition Mode"

	// WpaEncryptionModeWPA3Only captures enum value "WPA3 only"
	WpaEncryptionModeWPA3Only WpaEncryptionMode = "WPA3 only"
)

// for schema
var wpaEncryptionModeEnum []interface{}

func init() {
	var res []WpaEncryptionMode
	if err := json.Unmarshal([]byte(`["WPA1 only","WPA1 and WPA2","WPA2 only","WPA3 Transition Mode","WPA3 only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wpaEncryptionModeEnum = append(wpaEncryptionModeEnum, v)
	}
}

func (m WpaEncryptionMode) validateWpaEncryptionModeEnum(path, location string, value WpaEncryptionMode) error {
	if err := validate.Enum(path, location, value, wpaEncryptionModeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this wpa encryption mode
func (m WpaEncryptionMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWpaEncryptionModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
