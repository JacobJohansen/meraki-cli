// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkBluetoothSettings updateNetworkBluetoothSettings
//
// swagger:model updateNetworkBluetoothSettings
type UpdateNetworkBluetoothSettings struct {

	// Whether APs will advertise beacons. (true, false)
	AdvertisingEnabled bool `json:"advertisingEnabled,omitempty"`

	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major int32 `json:"major,omitempty"`

	// major minor assignment mode
	MajorMinorAssignmentMode MajorMinorAssignmentMode `json:"majorMinorAssignmentMode,omitempty"`

	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor int32 `json:"minor,omitempty"`

	// Whether APs will scan for Bluetooth enabled clients. (true, false)
	ScanningEnabled bool `json:"scanningEnabled,omitempty"`

	// The UUID to be used in the beacon identifier.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this update network bluetooth settings
func (m *UpdateNetworkBluetoothSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMajorMinorAssignmentMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNetworkBluetoothSettings) validateMajorMinorAssignmentMode(formats strfmt.Registry) error {

	if swag.IsZero(m.MajorMinorAssignmentMode) { // not required
		return nil
	}

	if err := m.MajorMinorAssignmentMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("majorMinorAssignmentMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNetworkBluetoothSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNetworkBluetoothSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkBluetoothSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
