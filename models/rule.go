// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rule Rule
//
// swagger:model Rule
type Rule struct {

	// `any` or `restricted`. Specify the right to make inbound connections on the specified ports or port ranges. If `restricted`, a list of allowed IPs is mandatory.
	// Required: true
	Access *string `json:"access"`

	// An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges.
	AllowedIps []string `json:"allowedIps"`

	// The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
	// Required: true
	LanIP *string `json:"lanIp"`

	// A port or port ranges that will receive the forwarded traffic from the WAN
	// Required: true
	LocalPort *string `json:"localPort"`

	// A descriptive name for the rule
	Name string `json:"name,omitempty"`

	// TCP or UDP
	// Required: true
	Protocol *string `json:"protocol"`

	// A port or port ranges that will be forwarded to the host on the LAN
	// Required: true
	PublicPort *string `json:"publicPort"`
}

// Validate validates this rule
func (m *Rule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rule) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", m.Access); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateLanIP(formats strfmt.Registry) error {

	if err := validate.Required("lanIp", "body", m.LanIP); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateLocalPort(formats strfmt.Registry) error {

	if err := validate.Required("localPort", "body", m.LocalPort); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validatePublicPort(formats strfmt.Registry) error {

	if err := validate.Required("publicPort", "body", m.PublicPort); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule) UnmarshalBinary(b []byte) error {
	var res Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
