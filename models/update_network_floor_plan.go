// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkFloorPlan updateNetworkFloorPlan
//
// swagger:model updateNetworkFloorPlan
type UpdateNetworkFloorPlan struct {

	// bottom left corner
	BottomLeftCorner *BottomLeftCorner `json:"bottomLeftCorner,omitempty"`

	// bottom right corner
	BottomRightCorner *BottomRightCorner `json:"bottomRightCorner,omitempty"`

	// center
	Center *Center1 `json:"center,omitempty"`

	// The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
	ImageContents string `json:"imageContents,omitempty"`

	// The name of your floor plan.
	Name string `json:"name,omitempty"`

	// top left corner
	TopLeftCorner *TopLeftCorner `json:"topLeftCorner,omitempty"`

	// top right corner
	TopRightCorner *TopRightCorner `json:"topRightCorner,omitempty"`
}

// Validate validates this update network floor plan
func (m *UpdateNetworkFloorPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBottomLeftCorner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBottomRightCorner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopLeftCorner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopRightCorner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNetworkFloorPlan) validateBottomLeftCorner(formats strfmt.Registry) error {

	if swag.IsZero(m.BottomLeftCorner) { // not required
		return nil
	}

	if m.BottomLeftCorner != nil {
		if err := m.BottomLeftCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bottomLeftCorner")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateNetworkFloorPlan) validateBottomRightCorner(formats strfmt.Registry) error {

	if swag.IsZero(m.BottomRightCorner) { // not required
		return nil
	}

	if m.BottomRightCorner != nil {
		if err := m.BottomRightCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bottomRightCorner")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateNetworkFloorPlan) validateCenter(formats strfmt.Registry) error {

	if swag.IsZero(m.Center) { // not required
		return nil
	}

	if m.Center != nil {
		if err := m.Center.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("center")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateNetworkFloorPlan) validateTopLeftCorner(formats strfmt.Registry) error {

	if swag.IsZero(m.TopLeftCorner) { // not required
		return nil
	}

	if m.TopLeftCorner != nil {
		if err := m.TopLeftCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topLeftCorner")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateNetworkFloorPlan) validateTopRightCorner(formats strfmt.Registry) error {

	if swag.IsZero(m.TopRightCorner) { // not required
		return nil
	}

	if m.TopRightCorner != nil {
		if err := m.TopRightCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topRightCorner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNetworkFloorPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNetworkFloorPlan) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFloorPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
