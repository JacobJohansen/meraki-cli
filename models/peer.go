// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Peer Peer
//
// swagger:model Peer
type Peer struct {

	// ipsec policies
	IpsecPolicies *IpsecPolicies `json:"ipsecPolicies,omitempty"`

	// One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
	IpsecPoliciesPreset string `json:"ipsecPoliciesPreset,omitempty"`

	// The name of the VPN peer
	// Required: true
	Name *string `json:"name"`

	// A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
	NetworkTags []string `json:"networkTags"`

	// The list of the private subnets of the VPN peer
	// Required: true
	PrivateSubnets []string `json:"privateSubnets"`

	// The public IP of the VPN peer
	// Required: true
	PublicIP *string `json:"publicIp"`

	// [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
	RemoteID string `json:"remoteId,omitempty"`

	// The shared secret with the VPN peer
	// Required: true
	Secret *string `json:"secret"`
}

// Validate validates this peer
func (m *Peer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIpsecPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Peer) validateIpsecPolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.IpsecPolicies) { // not required
		return nil
	}

	if m.IpsecPolicies != nil {
		if err := m.IpsecPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsecPolicies")
			}
			return err
		}
	}

	return nil
}

func (m *Peer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Peer) validatePrivateSubnets(formats strfmt.Registry) error {

	if err := validate.Required("privateSubnets", "body", m.PrivateSubnets); err != nil {
		return err
	}

	return nil
}

func (m *Peer) validatePublicIP(formats strfmt.Registry) error {

	if err := validate.Required("publicIp", "body", m.PublicIP); err != nil {
		return err
	}

	return nil
}

func (m *Peer) validateSecret(formats strfmt.Registry) error {

	if err := validate.Required("secret", "body", m.Secret); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Peer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Peer) UnmarshalBinary(b []byte) error {
	var res Peer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
