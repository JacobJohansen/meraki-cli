// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DevicePolicy2 DevicePolicy2
//
// The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required.
//
// swagger:model DevicePolicy2
type DevicePolicy2 string

const (

	// DevicePolicy2Whitelisted captures enum value "Whitelisted"
	DevicePolicy2Whitelisted DevicePolicy2 = "Whitelisted"

	// DevicePolicy2Blocked captures enum value "Blocked"
	DevicePolicy2Blocked DevicePolicy2 = "Blocked"

	// DevicePolicy2Normal captures enum value "Normal"
	DevicePolicy2Normal DevicePolicy2 = "Normal"

	// DevicePolicy2GroupPolicy captures enum value "Group policy"
	DevicePolicy2GroupPolicy DevicePolicy2 = "Group policy"
)

// for schema
var devicePolicy2Enum []interface{}

func init() {
	var res []DevicePolicy2
	if err := json.Unmarshal([]byte(`["Whitelisted","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicePolicy2Enum = append(devicePolicy2Enum, v)
	}
}

func (m DevicePolicy2) validateDevicePolicy2Enum(path, location string, value DevicePolicy2) error {
	if err := validate.Enum(path, location, value, devicePolicy2Enum); err != nil {
		return err
	}
	return nil
}

// Validate validates this device policy2
func (m DevicePolicy2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDevicePolicy2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
