// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// L3FirewallRule L3FirewallRule
//
// swagger:model L3FirewallRule
type L3FirewallRule struct {

	// Description of the rule (optional)
	Comment string `json:"comment,omitempty"`

	// Destination IP address (in IP or CIDR notation), a fully-qualified domain name (FQDN, if your network supports it) or 'any'.
	// Required: true
	DestCidr *string `json:"destCidr"`

	// Destination port (integer in the range 1-65535), a port range (e.g. 8080-9090), or 'any'
	DestPort string `json:"destPort,omitempty"`

	// 'allow' or 'deny' traffic specified by this rule
	// Required: true
	Policy *string `json:"policy"`

	// The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any')
	// Required: true
	Protocol *string `json:"protocol"`
}

// Validate validates this l3 firewall rule
func (m *L3FirewallRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *L3FirewallRule) validateDestCidr(formats strfmt.Registry) error {

	if err := validate.Required("destCidr", "body", m.DestCidr); err != nil {
		return err
	}

	return nil
}

func (m *L3FirewallRule) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy); err != nil {
		return err
	}

	return nil
}

func (m *L3FirewallRule) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *L3FirewallRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *L3FirewallRule) UnmarshalBinary(b []byte) error {
	var res L3FirewallRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
