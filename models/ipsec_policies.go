// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IpsecPolicies IpsecPolicies
//
// Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
//
// swagger:model IpsecPolicies
type IpsecPolicies struct {

	// This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha1', 'md5'
	ChildAuthAlgo []string `json:"childAuthAlgo"`

	// This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
	ChildCipherAlgo []string `json:"childCipherAlgo"`

	// The lifetime of the Phase 2 SA in seconds.
	ChildLifetime int32 `json:"childLifetime,omitempty"`

	// This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled', 'group5', 'group2', 'group1'
	ChildPfsGroup []string `json:"childPfsGroup"`

	// This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha1', 'md5'
	IkeAuthAlgo []string `json:"ikeAuthAlgo"`

	// This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
	IkeCipherAlgo []string `json:"ikeCipherAlgo"`

	// This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group5', 'group2', 'group1'
	IkeDiffieHellmanGroup []string `json:"ikeDiffieHellmanGroup"`

	// The lifetime of the Phase 1 SA in seconds.
	IkeLifetime int32 `json:"ikeLifetime,omitempty"`
}

// Validate validates this ipsec policies
func (m *IpsecPolicies) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IpsecPolicies) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpsecPolicies) UnmarshalBinary(b []byte) error {
	var res IpsecPolicies
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
