// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Scheduling Scheduling
//
// The schedule for the group policy. Schedules are applied to days of the week.
//
// swagger:model Scheduling
type Scheduling struct {

	// Whether scheduling is enabled (true) or disabled (false). Defaults to false. If true, the schedule objects for each day of the week (monday - sunday) are parsed.
	Enabled bool `json:"enabled,omitempty"`

	// friday
	Friday *Friday `json:"friday,omitempty"`

	// monday
	Monday *Monday `json:"monday,omitempty"`

	// saturday
	Saturday *Saturday `json:"saturday,omitempty"`

	// sunday
	Sunday *Sunday `json:"sunday,omitempty"`

	// thursday
	Thursday *Thursday `json:"thursday,omitempty"`

	// tuesday
	Tuesday *Tuesday `json:"tuesday,omitempty"`

	// wednesday
	Wednesday *Wednesday `json:"wednesday,omitempty"`
}

// Validate validates this scheduling
func (m *Scheduling) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFriday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaturday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSunday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThursday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTuesday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWednesday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Scheduling) validateFriday(formats strfmt.Registry) error {

	if swag.IsZero(m.Friday) { // not required
		return nil
	}

	if m.Friday != nil {
		if err := m.Friday.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("friday")
			}
			return err
		}
	}

	return nil
}

func (m *Scheduling) validateMonday(formats strfmt.Registry) error {

	if swag.IsZero(m.Monday) { // not required
		return nil
	}

	if m.Monday != nil {
		if err := m.Monday.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monday")
			}
			return err
		}
	}

	return nil
}

func (m *Scheduling) validateSaturday(formats strfmt.Registry) error {

	if swag.IsZero(m.Saturday) { // not required
		return nil
	}

	if m.Saturday != nil {
		if err := m.Saturday.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saturday")
			}
			return err
		}
	}

	return nil
}

func (m *Scheduling) validateSunday(formats strfmt.Registry) error {

	if swag.IsZero(m.Sunday) { // not required
		return nil
	}

	if m.Sunday != nil {
		if err := m.Sunday.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sunday")
			}
			return err
		}
	}

	return nil
}

func (m *Scheduling) validateThursday(formats strfmt.Registry) error {

	if swag.IsZero(m.Thursday) { // not required
		return nil
	}

	if m.Thursday != nil {
		if err := m.Thursday.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thursday")
			}
			return err
		}
	}

	return nil
}

func (m *Scheduling) validateTuesday(formats strfmt.Registry) error {

	if swag.IsZero(m.Tuesday) { // not required
		return nil
	}

	if m.Tuesday != nil {
		if err := m.Tuesday.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tuesday")
			}
			return err
		}
	}

	return nil
}

func (m *Scheduling) validateWednesday(formats strfmt.Registry) error {

	if swag.IsZero(m.Wednesday) { // not required
		return nil
	}

	if m.Wednesday != nil {
		if err := m.Wednesday.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wednesday")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Scheduling) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Scheduling) UnmarshalBinary(b []byte) error {
	var res Scheduling
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
